// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package client

import (
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"net"
	"time"

	"github.com/fullstorydev/grpchan"
	"github.com/fullstorydev/grpchan/inprocgrpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"

	{{ .GoProtoPkgAlias }} "{{ .GoPkg }}/pb"
)

const (
	CLIENT_TYPE_REMOTE    = "REMOTE"
	CLIENT_TYPE_INPROCESS = "INPROCESS"
)

type GomeetClient struct {
	clientType        string
	address           string
	caCertificate     string
	clientCertificate string
	clientPrivateKey  string
	maxRecvMsgSize    int
	maxSendMsgSize    int
	withTls           bool
	cc                *grpc.ClientConn
	inProcessChannel  grpchan.Channel
	c                 {{ .GoProtoPkgAlias }}.{{ upperPascalCase .ShortName }}Client
}

func NewGomeetInProcessClient(
	inProcessChannel grpchan.Channel,
) (*GomeetClient, error) {
	// Get {{ upperPascalCase .ShortName }}Client
	c := {{ .GoProtoPkgAlias }}.New{{ upperPascalCase .ShortName }}ChannelClient(inProcessChannel)

	return &GomeetClient{
		clientType:        CLIENT_TYPE_INPROCESS,
		address:           "",
		caCertificate:     "",
		clientCertificate: "",
		clientPrivateKey:  "",
		cc:                nil,
		maxRecvMsgSize:    10,
		maxSendMsgSize:    10,
		withTls:           false,
		inProcessChannel:  inProcessChannel,
		c:                 c,
	}, nil
}

func NewGomeetClient(
	addr string,
	timeout int,
	caCertificate, clientCertificate, clientPrivateKey string,
	maxRecvMsgSize, maxSendMsgSize int,
	withTls bool,
) (*GomeetClient, error) {
	// set up a connection to the server
	var (
		clientDialOpts []grpc.DialOption
		cc             *grpc.ClientConn
		err            error
	)
	timeoutDuration := time.Duration(timeout) * time.Second
	if caCertificate != "" && clientCertificate != "" && clientPrivateKey != "" {
		// load the client's key pair
		clientKeyPair, err := tls.LoadX509KeyPair(clientCertificate, clientPrivateKey)
		if err != nil {
			return nil, fmt.Errorf("failed to load gRPC client key pair: %v", err)
		}

		// create a certificate pool from the CA
		certPool := x509.NewCertPool()
		ca, err := ioutil.ReadFile(caCertificate)
		if err != nil {
			return nil, fmt.Errorf("failed to read CA certificate: %v", err)
		}
		if ok := certPool.AppendCertsFromPEM(ca); !ok {
			return nil, fmt.Errorf("failed to build certificate pool")
		}

		// set up the TLS credentials
		serverHost, _, err := net.SplitHostPort(addr)
		if err != nil {
			return nil, fmt.Errorf("failed to parse server hostname in %s: %v", addr, err)
		}
		clientCredentials := credentials.NewTLS(&tls.Config{
			ServerName:   serverHost,
			Certificates: []tls.Certificate{clientKeyPair},
			RootCAs:      certPool,
		})
		clientDialOpts = append(clientDialOpts, grpc.WithTransportCredentials(clientCredentials))
	} else if withTls {
		clientCredentials := credentials.NewTLS(&tls.Config{
			InsecureSkipVerify: true,
		})
		clientDialOpts = append(clientDialOpts, grpc.WithTransportCredentials(clientCredentials))
	} else {
		clientDialOpts = append(clientDialOpts, grpc.WithInsecure())
	}
	clientDialOpts = append(clientDialOpts, grpc.WithTimeout(timeoutDuration))
	clientDialOpts = append(clientDialOpts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(maxRecvMsgSize * 1024 * 1024)))
	clientDialOpts = append(clientDialOpts, grpc.WithDefaultCallOptions(grpc.MaxCallSendMsgSize(maxSendMsgSize * 1024 * 1024)))

	cc, err = grpc.Dial(addr, clientDialOpts...)

	if err != nil {
		return nil, fmt.Errorf("gRPC connect fail - %v", err)
	}

	// Get {{ upperPascalCase .ShortName }}Client
	c := {{ .GoProtoPkgAlias }}.New{{ upperPascalCase .ShortName }}Client(cc)

	return &GomeetClient{
		clientType:        CLIENT_TYPE_REMOTE,
		address:           addr,
		caCertificate:     caCertificate,
		clientCertificate: clientCertificate,
		clientPrivateKey:  clientPrivateKey,
		maxRecvMsgSize:    maxRecvMsgSize,
		maxSendMsgSize:    maxSendMsgSize,
		withTls:           withTls,
		cc:                cc,
		inProcessChannel:  new(inprocgrpc.Channel),
		c:                 c,
	}, nil
}

// Close : close grpc connection `cc`
func (c *GomeetClient) Close() {
	if c.cc != nil {
		c.cc.Close()
	}
}

// GetGRPCClient : getter on internal gRPC client
func (c GomeetClient) GetGRPCClient() {{ .GoProtoPkgAlias }}.{{ upperPascalCase .ShortName }}Client {
	return c.c
}

// Return address
func (c GomeetClient) GetAddress() string {
	return c.address
}

// GetCaCertificate return caCertificate
func (c GomeetClient) GetCaCertificate() string {
	return c.caCertificate
}

// GetCertificate return clientCertificate
func (c GomeetClient) GetCertificate() string {
	return c.clientCertificate
}

// GetPrivateKey return clientPrivateKey
func (c GomeetClient) GetPrivateKey() string {
	return c.clientPrivateKey
}

// GetMaxRecvMsgSize return maxRecvMsgSize DialOption
func (c GomeetClient) GetMaxRecvMsgSize() int {
	return c.maxRecvMsgSize
}

// GetMaxSendMsgSize return maxSendMsgSize DialOption
func (c GomeetClient) GetMaxSendMsgSize() int {
	return c.maxSendMsgSize
}

// GetWithTls return withTls DialOption
func (c GomeetClient) GetWithTls() bool {
	return c.withTls
}
