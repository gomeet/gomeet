// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package models

import (
	"flag"{{ if .DbTypes }}
	"fmt"{{ end }}
	"os"
	"testing"{{ if .DbTypes }}
	"github.com/stretchr/testify/assert"{{ end }}
	log "github.com/sirupsen/logrus"
)

var (
	debugMode  bool
	// Main database
	{{ range .DbTypes }}
	{{ lowerPascalCase . }}DSN string
	{{ end }}
)

func init() {
	// force debug mode
	flag.BoolVar(&debugMode, "d", false, "Force debug mode")
	{{ range .DbTypes }}
	{{ if eq . "mysql" }}// {{ upperPascalCase . }} data source name: https://github.com/go-sql-driver/{{ lower . }}#dsn-data-source-name
	flag.StringVar(&{{ lowerPascalCase . }}DSN, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (USERNAME:PASSWORD@tcp(HOSTNAME:PORT)/DBNAME)")
	{{ else if eq . "postgres" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&{{ lowerPascalCase . }}DSN, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (host=HOSTNAME port=DBPORT user=USERNAME dbname=DBNAME password=PASSWORD)")
	{{ else if eq . "sqlite" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&{{ lowerPascalCase . }}DSN, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} data source file")
	{{ else if eq . "mssql" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&{{ lowerPascalCase . }}DSN, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (sqlserver://USERNAME:PASSWORD@tcp(HOSTNAME:PORT)?database=DBNAME)")
	{{ end }}
	{{ end }}

	flag.Parse()

	log.SetLevel(log.PanicLevel)
	if debugMode {
		log.SetLevel(log.DebugLevel)
		log.Debug("set log debug level")
	}

	{{ range .DbTypes }}
	log.WithFields(log.Fields{
		"{{ lowerPascalCase . }}DSN": {{ lowerPascalCase . }}DSN,
	}).Debug("{{ lowerPascalCase . }}DSN flag")
	{{ end }}
}

{{ if .DbTypes }}
func flushDbTest(t *testing.T) {
	var err error
	{{ range .DbTypes }}
	assert.NotEmpty(t, {{ lowerPascalCase . }}DSN, "{{ lowerPascalCase . }}DSN is empty")

	{{ if eq (len $.DbTypes) 1 }}err = MigrateSchema({{ lowerPascalCase . }}DSN)
	{{ else }}err = MigrateSchema("{{ lower . }}", {{ lowerPascalCase . }}DSN){{ end }}
	assert.Nil(t, err, fmt.Sprintf("{{ lowerKebabCase $.Name }} - {{ lower . }} database migration fail - dsn: %s", {{ lowerPascalCase . }}DSN))

	{{ if eq (len $.DbTypes) 1 }}err = Flush({{ lowerPascalCase . }}DSN)
	{{ else }}err = Flush("{{ lower . }}", {{ lowerPascalCase . }}DSN){{ end }}
	assert.Nil(t, err, fmt.Sprintf("{{ lowerKebabCase $.Name }} - {{ lower . }} database migration fail - dsn: %s", {{ lowerPascalCase . }}DSN))
	{{ end }}
}
{{ end }}

func TestMain(m *testing.M) {
	r := m.Run()

	os.Exit(r)
}
