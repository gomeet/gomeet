// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package models

{{ if not .DbTypes }}
// Empty DB_TYPES in Makefile nothing to generate
{{ else }}
import (
	{{ if gt (len .DbTypes) 1 }}"errors"{{ end }}
	"fmt"
	"strings"

	"github.com/jinzhu/gorm"
	{{ if .DbTypes }}"github.com/jinzhu/gorm"
	{{ range .DbTypes }}_ "github.com/jinzhu/gorm/dialects/{{ lower . }}"
	{{ end }}{{ end -}}
)

{{ if eq (len .DbTypes) 1 }}func MigrateSchema(dsn string) error {
	{{ range .DbTypes }}
		{{ if eq . "mysql" }}if strings.Contains(dsn, "?") {
			return fmt.Errorf("database connection error: data source name cannot contain options")
		}
		dsn = fmt.Sprintf("%s?charset=utf8&parseTime=True", dsn)
		{{ end }}
		db, err := gorm.Open("{{ lower . }}", dsn)
		if err != nil {
			return fmt.Errorf("{{ upperPascalCase . }} database connection error: %v", err)
		}
		mdls := {{ lowerPascalCase . }}Models()
		if len(mdls) > 0 {
			{{ if eq . "mysql" }}db.Set("gorm:table_options", fmt.Sprintf("ENGINE=%s", "InnoDB")).AutoMigrate(mdls...)
			{{ else }}db.AutoMigrate(mdls...){{ end }}
            for _, mdl := range mdls {
				if !db.HasTable(mdl) {
					return fmt.Errorf("Schema migration error: the %v table does not exist", mdl)
				}
			}
		}
	{{ end }}
	return nil
}
{{ else }}func MigrateSchema(dbType, dsn string) error {
	if len(dbType) > 0 {
		switch strings.ToLower(dbType) {
		{{ range .DbTypes }}case "{{ lower . }}":{{ if eq . "mysql" }}
			if strings.Contains(dsn, "?") {
				return fmt.Errorf("database connection error: data source name cannot contain options")
			}
			dsn = fmt.Sprintf("%s?charset=utf8&parseTime=True", dsn){{ end }}
			db, err := gorm.Open("{{ lower . }}", dsn)
			if err != nil {
				return fmt.Errorf("{{ upperPascalCase . }} database connection error: %v", err)
			}
			mdls := {{ lowerPascalCase . }}Models()
			if len(mdls) > 0 {
				{{ if eq . "mysql" }}db.Set("gorm:table_options", fmt.Sprintf("ENGINE=%s", "InnoDB")).AutoMigrate(mdls...)
				{{ else }}db.AutoMigrate(mdls...){{ end }}
		        for _, mdl := range mdls {
					if !db.HasTable(mdl) {
						return fmt.Errorf("Schema migration error: the %v table does not exist", mdl)
					}
				}
			}
			return nil

		{{ end }}default:
			return fmt.Errorf("%s unknow dbType", dbType)
		}
	}

	return errors.New("Empty dbType")
}
{{ end }}{{ end }}
