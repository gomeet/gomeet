// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
// to extend the {{ lowerPascalCase .ShortName }}HTTPController struct use a new file
package service

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	log "github.com/sirupsen/logrus"

	{{ .GoProtoPkgAlias }} "{{ .GoPkg }}/{{ .GoProtoPkgAlias }}"
)

type {{ lowerPascalCase .ShortName }}HTTPController struct{
	version string `json:"version"`
}

func (s {{ lowerPascalCase .ShortName }}HTTPController) Status(w http.ResponseWriter, r *http.Request) {
	log.Info("{{ lowerPascalCase .ShortName }}HTTPController.Status")
	fmt.Fprintf(w, "OK")
}

func (s {{ lowerPascalCase .ShortName }}HTTPController) Swagger(w http.ResponseWriter, r *http.Request) {
	log.Info("{{ lowerPascalCase .ShortName }}HTTPController.Swagger")
	w.Header().Set("Content-Type", "application/json")
	io.Copy(w, strings.NewReader({{ .GoProtoPkgAlias }}.Swagger))
}

func (s {{ lowerPascalCase .ShortName }}HTTPController) Version(w http.ResponseWriter, r *http.Request) {
	log.Info("{{ lowerPascalCase .ShortName }}HTTPController.Version")
	v := {{ .GoProtoPkgAlias }}.VersionResponse{
		Name:    name,
		Version: s.version,
	}
	output, err := json.Marshal(v)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.Write(output)
}
