// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package service

{{ if not .DbTypes }}
// Empty DB_TYPES in Makefile nothing to generate
{{ else }}
import (
	{{ if gt (len .DbTypes) 1 }}"errors"{{ end }}
	"fmt"
	"strings"

	"github.com/jinzhu/gorm"
	log "github.com/sirupsen/logrus"
)

type GormLogger struct {}

func (*GormLogger) Print(v ...interface{}) {
    if v[0] == "sql" {
        log.WithFields(log.Fields{"module": "gorm", "type": "sql"}).Debug(v[3])
    }
    if v[0] == "log" {
        log.WithFields(log.Fields{"module": "gorm", "type": "log"}).Warn(v[2])
    }
}

// initDatabaseHandle initializes the databases handles of the server.
{{ if eq (len .DbTypes) 1 }}func (s *{{ lowerPascalCase .ShortName }}Server) initDatabaseHandle() error {
	{{ range .DbTypes }}// establish the connection if it's not ready
	if s.{{ lowerPascalCase . }}Handle == nil {
		{{ if eq . "mysql" }}if strings.Contains(s.{{ lowerPascalCase . }}DataSourceName, "?") {
			return fmt.Errorf("database connection error: data source name cannot contain options")
		}
		dsn := fmt.Sprintf("%s?charset=utf8&parseTime=True", s.{{ lowerPascalCase . }}DataSourceName)
		{{/* else if eq . "postgres" }} {{ else if eq . "sqlite" }} {{ else if eq . "mssql" */}}
		{{ else }}dsn := s.{{ lowerPascalCase . }}DataSourceName
		{{ end }}
		{{ lowerPascalCase . }}Handle, err := gorm.Open("{{ lower . }}", dsn)
		if err != nil {
			log.WithFields(log.Fields{
				"DSN": s.{{ lowerPascalCase . }}DataSourceName,
			}).Infof("database connection error: %v", err)
			return err
		}
		{{ lowerPascalCase . }}Handle.SetLogger(&GormLogger{})
		{{ lowerPascalCase . }}Handle.LogMode(true)
		s.{{ lowerPascalCase . }}Handle = {{ lowerPascalCase . }}Handle
	}

	// ping the database server
	err := s.{{ lowerPascalCase . }}Handle.DB().Ping()
	if err != nil {
		return err
	}{{ end }}
	return nil
}
{{ else }}func (s *{{ lowerPascalCase .ShortName }}Server) initDatabaseHandle(dbType string) error {
	if len(dbType) > 0 {
		switch strings.ToLower(dbType) {
		{{ range .DbTypes }}case "{{ lower . }}":
			// establish the connection if it's not ready
			if s.{{ lowerPascalCase . }}Handle == nil {
				{{ if eq . "mysql" }}if strings.Contains(s.{{ lowerPascalCase . }}DataSourceName, "?") {
					return fmt.Errorf("database connection error: data source name cannot contain options")
				}
				dsn := fmt.Sprintf("%s?charset=utf8&parseTime=True", s.{{ lowerPascalCase . }}DataSourceName)
				{{/* else if eq . "postgres" }} {{ else if eq . "sqlite" }} {{ else if eq . "mssql" */}}
				{{ else }}dsn := s.{{ lowerPascalCase . }}DataSourceName
				{{ end }}
				{{ lowerPascalCase . }}Handle, err := gorm.Open("{{ lowerPascalCase . }}", dsn)
				if err != nil {
					log.WithFields(log.Fields{
						"DSN": s.{{ lowerPascalCase . }}DataSourceName,
					}).Infof("database connection error: %v", err)
					return err
				}
			{{ lowerPascalCase . }}Handle.SetLogger(&GormLogger{})
			{{ lowerPascalCase . }}Handle.LogMode(true)
				s.{{ lowerPascalCase . }}Handle = {{ lowerPascalCase . }}Handle
			}

			// ping the database server
			err := s.{{ lowerPascalCase . }}Handle.DB().Ping()
			if err != nil {
				return err
			}
			return nil

		{{ end }}default:
			return fmt.Errorf("%s unknow dbType", dbType)
		}
	}

	return errors.New("Empty dbType")
}
{{ end }}

{{ if eq (len .DbTypes) 1 }}func (s *{{ lowerPascalCase .ShortName }}Server) closeDatabaseHandle() error {
	{{ range .DbTypes }}// close the connection if it's not empty
	if s.{{ lowerPascalCase . }}Handle != nil {
		err := s.{{ lowerPascalCase . }}Handle.Close()
		if err != nil {
			return err
		}
		s.{{ lowerPascalCase . }}Handle = nil
	}{{ end }}

	return nil
}
{{ else }}func (s *{{ lowerPascalCase .ShortName }}Server) closeDatabaseHandle(dbType string) error {
	if len(dbType) > 0 {
		switch strings.ToLower(dbType) {
		{{ range .DbTypes }}case "{{ lower . }}":
			// close the connection if it's not empty
			if s.{{ lowerPascalCase . }}Handle != nil {
				err := s.{{ lowerPascalCase . }}Handle.Close()
				if err != nil {
					return err
				}
				s.{{ lowerPascalCase . }}Handle = nil
			}
			return nil

		{{ end }}default:
			return fmt.Errorf("%s unknow dbType", dbType)
		}
	}

	return errors.New("Empty dbType")
}
{{ end }}
{{ end }}
