// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package service

{{ if not .QueueTypes }}
// Empty QUEUE_TYPES in Makefile nothing to generate
{{ else }}
        //plop
import (
	_ "errors"
{{ range .QueueTypes }}
	{{ if eq . "memory" }}{{ lowerPascalCase . }}Queue "github.com/gomeet/gomeet-memory-queue/models"
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// zeromq support is not yet implemented
	{{ end }}
{{ end }}
)

{{ if eq (len .QueueTypes) 1 }}func (s *{{ lowerPascalCase .ShortName }}Server) initQueue() error {
	{{ range .QueueTypes }}
	{{ if eq . "memory" }}
	if s.{{ lowerPascalCase . }}Queue == nil {
		s.{{ lowerPascalCase . }}Queue = {{ lowerPascalCase . }}Queue.NewDispatcher(s.{{ lowerPascalCase . }}QueueWorkerCount, s.{{ lowerPascalCase . }}QueueMaxSize)
		s.{{ lowerPascalCase . }}Queue.Start()
	}

	return nil
	{{ else if eq . "rabbitmq" }}// establish the connection with the queue server
	// rabbitmq support is not yet implemented
	return errors.New("rabbitmq support is not yet implemented")
	{{ else if eq . "zeromq" }}// establish the connection with the queue server
	// zeromq support is not yet implemented
	return errors.New("zeromq support is not yet implemented")
	{{ else if eq . "sqs" }}// establish the connection with the queue server
	// zeromq support is not yet implemented
	return errors.New("sqs support is not yet implemented")
	{{ end }}
	{{ end }}
}
{{ else }}func (s *{{ lowerPascalCase .ShortName }}Server) initQueue(queueType string) error {
	if len(queueType) > 0 {
		switch strings.ToLower(queueType) {
		{{ range .QueueTypes }}case "{{ lower . }}":
			if s.{{ lowerPascalCase . }}Queue == nil {
			{{ if eq . "memory" }}
			if s.{{ lowerPascalCase . }}Queue == nil {
				s.{{ lowerPascalCase . }}Queue = {{ lowerPascalCase . }}Queue.NewDispatcher(s.{{ lowerPascalCase . }}QueueWorkerCount, s.{{ lowerPascalCase . }}QueueMaxSize)
				s.{{ lowerPascalCase . }}Queue.Start()
			}
			return nil
			{{ else if eq . "rabbitmq" }}
			// rabbitmq support is not yet implemented
			return errors.New("rabbitmq support is not yet implemented")
			{{ else if eq . "zeromq" }}
			// zeromq support is not yet implemented
			return errors.New("zeromq support is not yet implemented")
			{{ else if eq . "sqs" }}
			// zeromq support is not yet implemented
			return errors.New("sqs support is not yet implemented")
			{{ end }}
			}
		{{ end }}default:
			return fmt.Errorf("%s unknow queueType", queueType)
		}
	}

	return errors.New("Empty queueType")
}
{{ end }}
{{ end }}
