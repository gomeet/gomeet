// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package service

import (
	"sort"
	"sync"
	{{ if .SubServices }}"time"{{ end }}

	"golang.org/x/net/context"

	gomeetContext "{{ .GomeetPkg }}/utils/context"
	"{{ .GomeetPkg }}/utils/log"

	{{ .GoProtoPkgAlias }} "{{ .GoPkg }}/{{ .GoProtoPkgAlias }}"
	// SUB-SERVICES DEFINITION : import-pb
	// svc{{ "{{SubServiceNamePascalCase}}" }}Pb "{{ .ProjectGroupGoPkg }}/{{ .Prefix }}{{ "{{SubServiceNameKebabCase}}" }}/pb"
	{{ range .SubServices }}svc{{ upperPascalCase .ShortName }}Pb "{{ .GoPkg }}/pb"
	{{ end }}// END SUB-SERVICES DEFINITION : import-pb
)

type servicesStatusByName []*{{ .GoProtoPkgAlias }}.ServiceStatus

func (n servicesStatusByName) Len() int           { return len(n) }
func (n servicesStatusByName) Swap(i, j int)      { n[i], n[j] = n[j], n[i] }
func (n servicesStatusByName) Less(i, j int) bool { return n[i].Name < n[j].Name }

func serviceStatusErrorHandler(ctx context.Context, ver *{{ .GoProtoPkgAlias }}.VersionResponse, err error, logM string) *{{ .GoProtoPkgAlias }}.ServiceStatus {
	log.Error(ctx, logM, err, log.Fields{
		"Svc": ver.GetName(),
	})

	return &{{ .GoProtoPkgAlias }}.ServiceStatus{
		Name:    ver.GetName(),
		Version: ver.GetVersion(),
		Status:  {{ .GoProtoPkgAlias }}.ServiceStatus_UNAVAILABLE,
		EMsg:    err.Error(),
	}
}

func serviceStatusSuccessHandler(ver *{{ .GoProtoPkgAlias }}.VersionResponse) *{{ .GoProtoPkgAlias }}.ServiceStatus {
	return &{{ .GoProtoPkgAlias }}.ServiceStatus{
		Name:    ver.GetName(),
		Version: ver.GetVersion(),
		Status:  {{ .GoProtoPkgAlias }}.ServiceStatus_OK,
		EMsg:    "",
	}
}

func svcCurrentStatus(s *{{ lowerPascalCase .ShortName }}Server, ctx context.Context, svcCtx context.Context) *{{ .GoProtoPkgAlias }}.ServiceStatus {
	ver, err := s.Version(ctx, &{{ messageGoType .GrpcMethod.Method.GetInputType }}{})
	if err != nil {
		return serviceStatusErrorHandler(ctx, &{{ .GoProtoPkgAlias }}.VersionResponse{Name: name, Version: version}, err, "Version call error")
	}
	return serviceStatusSuccessHandler(&{{ .GoProtoPkgAlias }}.VersionResponse{Name: ver.GetName(), Version: ver.GetVersion()})
}

// SUB-SERVICES DEFINITION : func-status
{{ range .SubServices }}func svc{{ upperPascalCase .ShortName }}Status(s *{{ lowerPascalCase $.ShortName }}Server, ctx context.Context, svcCtx context.Context) *{{ $.GoProtoPkgAlias }}.ServiceStatus {
	if err := s.init{{ upperPascalCase .ShortName }}Client(); err != nil {
		return serviceStatusErrorHandler(ctx, &{{ $.GoProtoPkgAlias }}.VersionResponse{Name: "{{ $.Prefix }}{{ lowerKebabCase .ShortName }}", Version: "unknow"}, err, "Init client error")
	}
	subSvcCtx, cancel := context.WithTimeout(svcCtx, time.Duration(grpcTimeout)*time.Second)
	defer cancel()

	ver, err := s.svc{{ upperPascalCase .ShortName }}GrpcClient.Version(subSvcCtx, &svc{{ upperPascalCase .ShortName }}Pb.EmptyMessage{})
	if err != nil {
		return serviceStatusErrorHandler(ctx, &{{ $.GoProtoPkgAlias }}.VersionResponse{Name: "{{ $.Prefix }}{{ lowerKebabCase .ShortName }}", Version: "unknow"}, err, "Version call error")
	}
	return serviceStatusSuccessHandler(&{{ $.GoProtoPkgAlias }}.VersionResponse{Name: ver.GetName(), Version: ver.GetVersion()})
}
{{ end }}
// END SUB-SERVICES DEFINITION : func-status

func (s *{{ lowerPascalCase .ShortName }}Server) ServicesStatus(ctx context.Context, req *{{ messageGoType .GrpcMethod.Method.GetInputType }}) (*{{ messageGoType .GrpcMethod.Method.GetOutputType }}, error) {
	log.Debug(ctx, "message call", log.Fields{"req": req})

	var ss []*{{ .GoProtoPkgAlias }}.ServiceStatus
	var wg sync.WaitGroup
	var mu = &sync.Mutex{}
	svcCtx := gomeetContext.NewSubServiceContext(ctx)

	fns := []func(*{{ lowerPascalCase .ShortName }}Server, context.Context, context.Context) *{{ .GoProtoPkgAlias }}.ServiceStatus{
		svcCurrentStatus,
		// SUB-SERVICES DEFINITION : call-status
		// svc{{ "{{SubServiceNamePascalCase}}" }}Status,
		{{ range .SubServices }}svc{{ upperPascalCase .ShortName }}Status,
		{{ end }}
		// END SUB-SERVICES DEFINITION : call-status
	}

	wg.Add(len(fns))
	for _, fn := range fns {
		go func(f func(*{{ lowerPascalCase .ShortName }}Server, context.Context, context.Context) *{{ .GoProtoPkgAlias }}.ServiceStatus) {
			defer wg.Done()
			svcStatus := f(s, ctx, svcCtx)
			mu.Lock()
			defer mu.Unlock()
			ss = append(ss, svcStatus)
		}(fn)
	}
	wg.Wait()

	sort.Sort(servicesStatusByName(ss))

	return &{{ messageGoType .GrpcMethod.Method.GetOutputType }}{Services: ss}, nil
}
