// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
// Package service provides gRPC/HTTP service registration
package service

import (
	"flag"
	"fmt"
	"os"{{ if .CountSubServicesWithDbTypes }}
	"sync"{{ end }}
	"testing"
	{{ if .HasMemoryQueue }}"runtime"{{ end }}
	{{ if .HasDb }}"errors"

	"github.com/stretchr/testify/assert"{{ end }}
	"github.com/fullstorydev/grpchan"
	"github.com/fullstorydev/grpchan/inprocgrpc"
	log "github.com/sirupsen/logrus"

	gomeetService "github.com/gomeet/gomeet/utils/service"

	{{ if .HasDb }}{{ if .DbTypes }}"{{ .GoPkg }}/models"{{ end }}
	{{ range .SubServices }}{{ $ss := . }}{{ if .DbTypes }}svc{{ upperPascalCase $ss.ShortName }}Models "{{ $ss.GoPkg }}/models"
	{{ end }}{{ end }}
	{{- end }}
	{{ .GoProtoPkgAlias }} "{{ .GoPkg }}/pb"
	"{{ .GoPkg }}/client"
)

var (
	debugMode  bool
	svc        *Service
	cli        {{ .GoProtoPkgAlias }}.{{ upperPascalCase .ShortName }}Client
	jwtKey     string
	caCert     string
	serverCert string
	serverKey  string
	maxRecvMsgSize     int
	maxSendMsgSize     int

	// Main server database and extra flags
	{{ range .DbTypes }}
	{{ lowerPascalCase . }}DSN string
	{{ end }}{{ range .ExtraServeFlags }}{{ lowerPascalCase .Name }}ExtraFlag {{ .Type }}
	{{ end }}
	// SubService databases and extra flags
	{{ range .SubServices }}
	{{ $ss := . }}{{ range .DbTypes }}
	svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN string
	{{ end }}{{ range .ExtraServeFlags }}svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag {{ .Type }}
	{{ end }}{{ end }}

	// Main server queue
	{{ range .QueueTypes }}{{ if eq . "memory" }}
	{{ lowerPascalCase . }}QueueWorkerCount  int
	{{ lowerPascalCase . }}QueueMaxSize      int
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}
	// SubService queue
	{{ range .SubServices }}{{ $ss := . }}
	{{ range .QueueTypes }}{{ if eq . "memory" }}
	svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueWorkerCount  int
	svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueMaxSize      int
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}{{ end }}
)

func init() {
	// force debug mode
	flag.BoolVar(&debugMode, "d", false, "Force debug mode")
	// JWT secret signing key
	flag.StringVar(&jwtKey, "jwt-secret", "", "JSON Web Token secret signing key (required for JWT support)")
	// CA certificate
	flag.StringVar(&caCert, "ca", "", "X.509 certificate of the Certificate Authority (required for gRPC TLS support)")
	// gRPC server certificate
	flag.StringVar(&serverCert, "cert", "", "X.509 certificate of the gRPC server (required for gRPC TLS support)")
	// gRPC server private key
	flag.StringVar(&serverKey, "key", "", "RSA private key of the gRPC server (required for gRPC TLS support)")
	// maxRecvMsgSize a ServerOption to set the max message size in bytes the server can receive
	flag.IntVar(&maxRecvMsgSize, "max-recv-msg-size", 10, "The max message size in mega bytes the server can receive")
	// maxSendMsgSize a ServerOption to set the max message size in bytes the server can receive
	flag.IntVar(&maxSendMsgSize, "max-send-msg-size", 10, "The max message size in mega bytes the server can send")

	{{ range .QueueTypes }}// Main queue system
	{{ if eq . "memory" }}
	flag.IntVar(&{{ lowerPascalCase . }}QueueWorkerCount, "{{ lower . }}-queue-worker-count", runtime.NumCPU(), "The number of spawned workers (default is num cpu)")
	flag.IntVar(&{{ lowerPascalCase . }}QueueMaxSize, "{{ lower . }}-queue-max-size", 100, "The max size of buffered asynchronous job queue (default 100)")
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}
	{{ range .DbTypes }}
	{{ if eq . "mysql" }}// {{ upperPascalCase . }} data source name: https://github.com/go-sql-driver/{{ lower . }}#dsn-data-source-name
	flag.StringVar(&{{ lowerPascalCase . }}DSN, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (USERNAME:PASSWORD@tcp(HOSTNAME:PORT)/DBNAME)")
	{{ else if eq . "postgres" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&{{ lowerPascalCase . }}DSN, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (host=HOSTNAME port=DBPORT user=USERNAME dbname=DBNAME password=PASSWORD)")
	{{ else if eq . "sqlite" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&{{ lowerPascalCase . }}DSN, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} data source file")
	{{ else if eq . "mssql" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&{{ lowerPascalCase . }}DSN, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (sqlserver://USERNAME:PASSWORD@tcp(HOSTNAME:PORT)?database=DBNAME)")
	{{ end }}
	{{ end }}{{ range .ExtraServeFlags }}// {{ lowerPascalCase .Name }} flag is pass to gRPC server
	flag.{{ title .Type }}Var(&{{ lowerPascalCase .Name }}ExtraFlag, "{{ lowerKebabCase .Name }}", {{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }}, "{{ .Description }}")
	{{ end }}
	{{ range .SubServices }}
	{{ $ss := . }}{{ range .QueueTypes }}// {{ upperPascalCase $ss.ShortName }} queue system
	{{ if eq . "memory" }}
	flag.IntVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueWorkerCount, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-queue-worker-count", runtime.NumCPU(), "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} number of spawned workers (default is num cpu)")
	flag.IntVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueMaxSize, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-queue-max-size", 100, "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} max size of buffered asynchronous job queue (default 100)")
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}{{ range .DbTypes }}
	{{ if eq . "mysql" }}// {{ upperPascalCase . }} data source name: https://github.com/go-sql-driver/{{ lower . }}#dsn-data-source-name
	flag.StringVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn", "", "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} connection informations (USERNAME:PASSWORD@tcp(HOSTNAME:PORT)/DBNAME)")
	{{ else if eq . "postgres" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn", "", "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} connection informations (host=HOSTNAME port=DBPORT user=USERNAME dbname=DBNAME password=PASSWORD)")
	{{ else if eq . "sqlite" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn", "", "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} data source file")
	{{ else if eq . "mssql" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn", "", "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} connection informations (sqlserver://USERNAME:PASSWORD@tcp(HOSTNAME:PORT)?database=DBNAME)")
	{{ end }}{{ end }}{{ range .ExtraServeFlags }}
	flag.{{ title .Type }}Var(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lowerKebabCase .Name }}", {{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }}, "{{ .Description }}")
	{{ end }}{{ end }}

	flag.Parse()

	svc = NewService(gomeetService.INPROCESS_ADDRESS)
	log.SetLevel(log.PanicLevel)
	if debugMode {
		log.SetLevel(log.DebugLevel)
		log.WithFields(log.Fields{
			"Name":     svc.Name,
			"Version":  svc.Version,
		}).Debug("set log debug level")
	}

	{{ range .DbTypes }}
	log.WithFields(log.Fields{
		"{{ lowerPascalCase . }}DSN": {{ lowerPascalCase . }}DSN,
	}).Debug("{{ lowerPascalCase . }}DSN flag")
	{{ end }}{{ range .ExtraServeFlags }}
	log.WithFields(log.Fields{
		"{{ lowerPascalCase .Name }}ExtraFlag": {{ lowerPascalCase .Name }}ExtraFlag,
	}).Debug("{{ lowerPascalCase .Name }}ExtraFlag flag")
	{{ end }}
	{{ range .SubServices }}
	{{ $ss := . }}{{ range .DbTypes }}
	log.WithFields(log.Fields{
		"svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN": svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN,
	}).Debug("svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN flag")
	{{ end }}{{ range .ExtraServeFlags }}
	log.WithFields(log.Fields{
		"svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag": svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag,
	}).Debug("svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag flag")
	{{ end }}{{ end }}
}

{{ if .HasDb }}
func flushAllDbTest(t *testing.T) {
{{ if .CountSubServicesWithDbTypes }}
	var wg sync.WaitGroup
  wg.Add({{ .CountSubServicesWithDbTypes }})
{{ range .SubServices }}{{ $ss := . }}{{ if .DbTypes }}	go func() {
		defer wg.Done()
		flushDbSvc{{ upperPascalCase $ss.ShortName }}Test(t)
	}()
{{ end }}
{{- end }}
	{{ if .DbTypes }}go func() {
		defer wg.Done()
		flushDbTest(t)
	}()
{{ end }}
	wg.Wait()
{{ else }}
{{ range .SubServices }}{{ $ss := . }}{{ if .DbTypes }}	flushDbSvc{{ upperPascalCase $ss.ShortName }}Test(t)
{{ end }}
{{- end }}
	{{ if .DbTypes }}flushDbTest(t){{ end }}
{{ end }}
}
func migrateAllDbTest() error {
{{ range .SubServices }}{{ $ss := . }}{{ if .DbTypes }}	if err := migrateDbSvc{{ upperPascalCase $ss.ShortName }}Test(); err != nil {
		return err
	}
{{ end }}
{{- end }}
{{ if .DbTypes }}	if err := migrateDbTest(); err != nil {
		return err
	}{{ end }}
	return nil
}
{{ end }}

{{ if .DbTypes }}
func migrateDbTest() error {
	var err error
	{{ range .DbTypes }}
	if {{ lowerPascalCase . }}DSN == "" {
		return errors.New("{{ lowerPascalCase . }}DSN is empty")
	}
	{{ if eq (len $.DbTypes) 1 }}err = models.MigrateSchema({{ lowerPascalCase . }}DSN)
	{{ else }}err = models.MigrateSchema("{{ lower . }}", {{ lowerPascalCase . }}DSN){{ end }}
	return err
	{{ end }}
}
func flushDbTest(t *testing.T) {
	var err error
	{{ range .DbTypes }}
	assert.NotEmpty(t, {{ lowerPascalCase . }}DSN, "{{ lowerPascalCase . }}DSN is empty")

	{{ if eq (len $.DbTypes) 1 }}err = models.MigrateSchema({{ lowerPascalCase . }}DSN)
	{{ else }}err = models.MigrateSchema("{{ lower . }}", {{ lowerPascalCase . }}DSN){{ end }}
	assert.Nil(t, err, fmt.Sprintf("{{ lowerKebabCase $.Name }} - {{ lower . }} database migration fail - dsn: %s", {{ lowerPascalCase . }}DSN))

	{{ if eq (len $.DbTypes) 1 }}err = models.Flush({{ lowerPascalCase . }}DSN)
	{{ else }}err = models.Flush("{{ lower . }}", {{ lowerPascalCase . }}DSN){{ end }}
	assert.Nil(t, err, fmt.Sprintf("{{ lowerKebabCase $.Name }} - {{ lower . }} database migration fail - dsn: %s", {{ lowerPascalCase . }}DSN))
	{{ end }}
}
{{ end }}

{{ range .SubServices }}{{ $ss := . }}{{ if .DbTypes }}
func migrateDbSvc{{ upperPascalCase $ss.ShortName }}Test() error {
	var err error
	{{ range $ss.DbTypes }}
	if svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN == "" {
		return errors.New("svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN is empty")
	}
	{{ if eq (len $ss.DbTypes) 1 }}err = svc{{ upperPascalCase $ss.ShortName }}Models.MigrateSchema(svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN)
	{{ else }}err = svc{{ upperPascalCase $ss.ShortName }}Models.MigrateSchema("{{ lower . }}", svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN){{ end }}
	return err
	{{ end }}
}

func flushDbSvc{{ upperPascalCase $ss.ShortName }}Test(t *testing.T) {
	var err error
	{{ range $ss.DbTypes }}
	assert.NotEmpty(t, svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN, "svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN is empty")

	{{ if eq (len $ss.DbTypes) 1 }}err = svc{{ upperPascalCase $ss.ShortName }}Models.Flush(svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN)
	{{ else }}err = svc{{ upperPascalCase $ss.ShortName }}Models.Flush("{{ lower . }}", svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN){{ end }}
	assert.Nil(t, err, fmt.Sprintf("{{ lowerKebabCase $ss.Name }} - {{ lower . }} database migration fail - dsn: %s", svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN))
	{{ end }}
}
{{ end }}
{{ end }}

func TestMain(m *testing.M) {
	sInterceptors, uInterceptors := gomeetService.Interceptors()
	subServiceshandlers := grpchan.HandlerMap{}

	inProcessChannel := new(inprocgrpc.Channel)
	reg := grpchan.WithInterceptor(subServiceshandlers, uInterceptors, sInterceptors)
	{{ if .SubServices }}
	// sub-services can be loaded in this process
	{{ range .SubServices }}{{ $ss := . }}
	svc.RegisterSvc{{ upperPascalCase .ShortName }}GRPCServicesInprocess(
		reg, inProcessChannel,
		jwtKey, caCert, serverCert, serverKey,
		maxRecvMsgSize, maxSendMsgSize,
		{{ range .DbTypes }}svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DSN, {{ end -}}
		{{ range .QueueTypes }}{{ if eq . "memory" }}svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueWorkerCount, svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueMaxSize,
		{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
		{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
		{{ else if eq . "sqs" }}// sqs support is not yet implemented
		{{ end }}{{ end -}}
		{{ range .ExtraServeFlags }}svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag, {{ end -}}
		{{ range .SubServices }}gomeetService.INPROCESS_ADDRESS, {{ end }}
	)
	{{ end }}{{ end }}
	//Real server
	svc.RegisterGRPCServices(
		reg, inProcessChannel,
		jwtKey, caCert, serverCert, serverKey,
		maxRecvMsgSize, maxSendMsgSize,
		{{ range .DbTypes }}{{ lowerPascalCase . }}DSN, {{ end -}}
		{{ range .QueueTypes }}{{ if eq . "memory" }}{{ lowerPascalCase . }}QueueWorkerCount, {{ lowerPascalCase . }}QueueMaxSize,
		{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
		{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
		{{ else if eq . "sqs" }}// sqs support is not yet implemented
		{{ end }}{{ end -}}
		{{ range .ExtraServeFlags }}{{ lowerPascalCase .Name }}ExtraFlag, {{ end }}
		{{ range .SubServices }}gomeetService.INPROCESS_ADDRESS, {{ end }}
	)

	subServiceshandlers.ForEach(inProcessChannel.RegisterService)

	gCli, err := client.NewGomeetInProcessClient(inProcessChannel)
	if err != nil {
		fmt.Printf("Test fail : %s\n", err.Error())
		os.Exit(1)
	}

	cli = gCli.GetGRPCClient()

{{ if .HasDb }}if err := migrateAllDbTest(); err != nil {
		fmt.Printf("Test fail : %s\n", err.Error())
		os.Exit(1)
	}{{ end }}

	r := m.Run()

	os.Exit(r)
}
