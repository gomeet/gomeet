// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
// Package service provides gRPC/HTTP service registration
package service

import (
	"os"
	"testing"

	"github.com/grpc-ecosystem/go-grpc-middleware"
	"google.golang.org/grpc"

	"github.com/gomeet/gomeet/utils/tests/helpers"

	{{ .GoProtoPkgAlias }} "{{ .GoPkg }}/{{ .GoProtoPkgAlias }}"
)

var (
	svc *Service
	cli {{ .GoProtoPkgAlias }}.{{ upperPascalCase .ShortName }}Client
)


func TestMain(m *testing.M) {
	//TODO: need refactoring in gomeet generator
	sMdl := grpc.StreamInterceptor(grpc_middleware.ChainStreamServer())
	uMdl := grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer())
	svc = NewService()

	// get grpc server
	grpcS := grpc.NewServer(sMdl, uMdl)
	addr, serve := helpers.NewTestServer(grpcS)

	svc.RegisterGRPCServices(
		grpcS,
		"",
		"",
		"",
		"",
		{{ range .DbTypes }}"",
{{- end }}
	)
	go serve()

	cli = {{ .GoProtoPkgAlias }}.New{{ upperPascalCase .ShortName }}Client(helpers.TestConn(addr))

	r := m.Run()

	// removing unix socket in addr variable - /tmp/...
	os.Remove(addr)

	os.Exit(r)
}
