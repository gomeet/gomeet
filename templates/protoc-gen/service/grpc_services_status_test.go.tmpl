// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package service

import (
	"sort"
	"testing"

	"golang.org/x/net/context"

	gomeetService "github.com/gomeet/gomeet/utils/service"

{{ protoMessagesNeededImports false .GrpcMethod.Method.GetInputType }}
)

func TestServicesStatus(t *testing.T) {
	servicesStatusResponse, err := cli.ServicesStatus(context.Background(), &{{ messageGoType .GrpcMethod.Method.GetInputType }}{})

	if err != nil {
		t.Errorf("Error on calling ServiceStatus: %v", err)
	}

	var expected []*{{ .GoProtoPkgAlias }}.ServiceStatus
	// SUB-SERVICES DEFINITION : test-unit
	expected = append(expected, &{{ .GoProtoPkgAlias }}.ServiceStatus{Name: name, Version: gomeetService.INPROCESS_ADDRESS, Status: {{ .GoProtoPkgAlias }}.ServiceStatus_OK, EMsg: ""})
	// expected = append(expected, &{{ .GoProtoPkgAlias }}.ServiceStatus{Name: "{{ .Prefix }}{{ "{{SubServiceNameKebabCase}}" }}", Version:  gomeetService.INPROCESS_ADDRESS, Status:  {{ .GoProtoPkgAlias }}.ServiceStatus_OK, EMsg:  ""})
	{{ range .SubServices }}expected = append(expected, &{{ $.GoProtoPkgAlias }}.ServiceStatus{Name: "{{ $.Prefix }}{{ lowerKebabCase .ShortName }}", Version:  gomeetService.INPROCESS_ADDRESS, Status:  {{ $.GoProtoPkgAlias }}.ServiceStatus_OK, EMsg:  ""})
	{{ end }} // END SUB-SERVICES DEFINITION : test-unit

	sort.Sort(servicesStatusByName(expected))

	ssStatus := servicesStatusResponse.GetServices()

	if len(ssStatus) != len(expected) {
		t.Errorf("Expected \"%d\" elements in list, got \"%d\"", len(expected), len(ssStatus))
	}

	for i, sStatus := range ssStatus {
		if sStatus.GetName() != expected[i].GetName() {
			t.Errorf("Expected \"%s\" in Name field, got \"%s\"", expected[i].GetName(), sStatus.GetName())
		}

		if sStatus.GetVersion() != expected[i].GetVersion() {
			t.Errorf("Expected \"%s\" in Version field, got \"%s\"", expected[i].GetVersion(), sStatus.GetVersion())
		}
	}
}
