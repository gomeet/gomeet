// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
// Package service provides gRPC/HTTP service registration
package service

import (
	"context"

	"github.com/auth0/go-jwt-middleware"
	"github.com/fullstorydev/grpchan"
{{ if .IsGogoGen }}	"github.com/gogo/gateway"
{{ end }}	"github.com/gorilla/mux"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/prometheus/client_golang/prometheus"
	log "github.com/sirupsen/logrus"
	"google.golang.org/grpc"
  {{ if .SubServices }}{{ range .SubServices }}{{ $ss := . }}
	svc{{ upperPascalCase .ShortName }}Service "{{ .GoPkg }}/service"{{ end }}
	gomeetService "{{ .GomeetPkg }}/utils/service"{{ end }}

	{{ .GoProtoPkgAlias }} "{{ .GoPkg }}/{{ .GoProtoPkgAlias }}"
)

var (
	name       = "{{ lowerKebabCase .Name }}" // injected with -ldflags in Makefile
	version    = "latest" // injected with -ldflags in Makefile
)

// Service is the echo
type Service struct {
	Name       string `json:"name"`
	Version    string `json:"version"`
	httpController *{{ lowerPascalCase .ShortName }}HTTPController `json:"-"`
	serverImpl {{ .GoProtoPkgAlias }}.{{ upperPascalCase .ShortName }}Server `json:"-"`
	{{ range .SubServices }}svc{{ upperPascalCase .ShortName }} *svc{{ upperPascalCase .ShortName }}Service.Service `json:"-"`
{{ end -}}
}

// NewService return new {{ .Name }} service
func NewService(opts ...string) *Service {
	ver := version
	if len(opts) > 0 {
		ver = opts[0]
	}
	return &Service{
		Name:    name,
		Version: ver,
	}
}

func (svc Service) GetServerImpl() {{ .GoProtoPkgAlias }}.{{ upperPascalCase .ShortName }}Server { return svc.serverImpl }

{{ range .SubServices }}{{ $ss := . }}func (svc *Service) RegisterSvc{{ upperPascalCase .ShortName }}GRPCServicesInprocess(
	reg grpchan.ServiceRegistry, inProcessChannel grpchan.Channel,
	jwtKey, caCert, serverCert, serverKey string,
	maxRecvMsgSize, maxSendMsgSize int,
	{{ range .DbTypes }}{{ lowerPascalCase . }}DSN string, {{ end -}}
	{{ range .ExtraServeFlags }}{{ lowerPascalCase .Name }}ExtraFlag {{ .Type }}, {{ end -}}
	{{ range .SubServices }}svc{{ upperPascalCase .ShortName }}Address string, {{ end }}
) {
	svc.svc{{ upperPascalCase .ShortName }} = svc{{ upperPascalCase .ShortName }}Service.NewService(gomeetService.INPROCESS_ADDRESS)
	svc.svc{{ upperPascalCase .ShortName }}.RegisterGRPCServices(
		reg, inProcessChannel,
		jwtKey, caCert, serverCert, serverKey, maxRecvMsgSize, maxSendMsgSize,
		{{ range .DbTypes }}{{ lowerPascalCase . }}DSN, {{ end -}}
		{{ range .ExtraServeFlags }}{{ lowerPascalCase .Name }}ExtraFlag, {{ end -}}
		{{ range .SubServices }}svc{{ upperPascalCase .ShortName }}Address, {{ end }}
	)
}
{{ end }}

// RegisterGRPCServices register all grpc services in reg
func (svc *Service) RegisterGRPCServices(
	reg grpchan.ServiceRegistry, inProcessChannel grpchan.Channel,
	jwtSecret, caCert, cert, privKey string,
	maxRecvMsgSize, maxSendMsgSize int,
	// EXTRA : param
	{{ range .DbTypes }}{{ lowerPascalCase . }}DSN string,
	{{ end }}{{ range .ExtraServeFlags }}{{ lowerPascalCase .Name }} {{ .Type }},
	{{ end }}// END EXTRA : param
	// SUB-SERVICES DEFINITION : param-address
	// svc{{ "{{SubServiceNamePascalCase}}" }}Address string,
	{{ range .SubServices }}svc{{ upperPascalCase .ShortName }}Address string,
	{{ end }}// END SUB-SERVICES DEFINITION : param-address
) {
	log.WithFields(log.Fields{
		"jwtSecret":      jwtSecret,
		"caCert":         caCert,
		"cert":           cert,
		"privKey":        privKey,
		"maxRecvMsgSize": maxRecvMsgSize,
		"maxSendMsgSize": maxSendMsgSize,
		// EXTRA : log
		{{ range .DbTypes }}"{{ lowerPascalCase . }}DSN":  {{ lowerPascalCase . }}DSN,
		{{ end }}{{ range .ExtraServeFlags }}"{{ lowerPascalCase .Name }}":  {{ lowerPascalCase .Name }},
		{{ end }}// END EXTRA : log
		// SUB-SERVICES DEFINITION : log-address
		// "svc{{ "{{SubServiceNamePascalCase}}" }}Address": svc{{ "{{SubServiceNamePascalCase}}" }}Address,
		{{ range .SubServices }}"svc{{ upperPascalCase .ShortName }}Address": svc{{ upperPascalCase .ShortName }}Address,
		{{ end }}// END SUB-SERVICES DEFINITION : log-address
	}).Debug("{{ .Name }}: RegisterGRPCServices")
	svc.serverImpl = &{{ lowerPascalCase .ShortName }}Server{
		version:             svc.Version,
		subServicesRegistry: reg,
		inProcessChannel:    inProcessChannel,
		jwtSecret:           jwtSecret,
		caCertificate:       caCert,
		certificate:         cert,
		privateKey:          privKey,
		maxRecvMsgSize:      maxRecvMsgSize,
		maxSendMsgSize:      maxSendMsgSize,
		// EXTRA : register server
		{{ range .DbTypes }}{{ lowerPascalCase . }}DataSourceName:  {{ lowerPascalCase . }}DSN,
		{{ end }}{{ range .ExtraServeFlags }}{{ lowerPascalCase .Name }}:  {{ lowerPascalCase .Name }},
		{{ end }}// END EXTRA : register server
		// SUB-SERVICES DEFINITION : register-address-to-server
		// svc{{ "{{SubServiceNamePascalCase}}" }}Address: svc{{ "{{SubServiceNamePascalCase}}" }}Address,
		{{ range .SubServices }}svc{{ upperPascalCase .ShortName }}Address: svc{{ upperPascalCase .ShortName }}Address,
		{{ end }}// END SUB-SERVICES DEFINITION : register-address-to-server
	}
	{{ .GoProtoPkgAlias }}.RegisterHandler{{ upperPascalCase .ShortName }}(reg, svc.serverImpl)
}

// RegisterHTTPServices register all http services
func (svc *Service) RegisterHTTPServices(
	ctx context.Context,
	mux *mux.Router, addr string,
	opts []grpc.DialOption,
	jwtMiddleware *jwtmiddleware.JWTMiddleware,
) {
	svc.httpController = &{{ lowerPascalCase .ShortName }}HTTPController{
		version: svc.Version,
		jwtMiddleware: jwtMiddleware,
	}

	// get server mux{{ if .IsGogoGen }}
	jsonpb := &gateway.JSONPb{
		EmitDefaults: true,
		Indent:       "  ",
		OrigName:     true,
	}
	gwmux := runtime.NewServeMux(
		runtime.WithMarshalerOption(runtime.MIMEWildcard, jsonpb),
		// This is necessary to get error details properly
		// marshalled in unary requests.
		runtime.WithProtoErrorHandler(runtime.DefaultHTTPProtoErrorHandler),
	)
{{ else }}
	gwmux := runtime.NewServeMux()
{{ end }}
	err := {{ .GoProtoPkgAlias }}.Register{{ upperPascalCase .ShortName }}HandlerFromEndpoint(ctx, gwmux, addr, opts)
	if err != nil {
		log.Fatalf("RegisterGRPCGateway error : %s\n", err)
	}

	// prometheus instrument handler
	instrf := prometheus.InstrumentHandlerFunc
	// swagger doc handler
	mux.
		PathPrefix("/api/v1/swagger.json").
		Handler(instrf("Api.Swagger", svc.httpController.Swagger))

	// it's not necessary to use secure middleware for gRPC calls it's already secured
	// api gateway handlers with metrics instrumentations
	routeMap := map[string]string{
{{- httpMetricsRouteMap .Name .ProtoFiles -}}
	}
	for route, label := range routeMap {
		mux.PathPrefix(route).Handler(instrf(label, gwmux.ServeHTTP))
	}

	// prometheus metrics handler
	mux.
		Handle("/metrics", prometheus.Handler())

	svc.httpController.RegisterRoutes(mux)
}
