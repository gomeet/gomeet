// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package cmd

{{ if not .DbTypes }}
// Empty DB_TYPES in Makefile nothing to generate
{{ else }}
import (
	"fmt"
	"os"

	"{{ .GoPkg }}/models"

	"github.com/spf13/cobra"
)

var (
	migrateCmd = &cobra.Command{
		Use:   "migrate",
		Short: "Migrates the user database schema",
		Run:   migrateSchema,
	}
	{{ range .DbTypes }}{{ lowerPascalCase . }}MigrateDataSourceName string
	{{ end }}
)

func init() {
	rootCmd.AddCommand(migrateCmd)

	{{ range .DbTypes }}{{ if eq . "mysql" }}// {{ upperPascalCase . }} data source name: https://github.com/go-sql-driver/{{ lower . }}#dsn-data-source-name
	migrateCmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}MigrateDataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (USERNAME:PASSWORD@tcp(HOSTNAME:3306)/DBNAME)")
	{{ else if eq . "postgres" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	migrateCmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}MigrateDataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (host=HOSTNAME port=DBPORT user=USERNAME dbname=DBNAME password=PASSWORD)")
	{{ else if eq . "sqlite" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	migrateCmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}MigrateDataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} data source file")
	{{ else if eq . "mssql" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	migrateCmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}MigrateDataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (sqlserver://USERNAME:PASSWORD@tcp(HOSTNAME:1433)?database=DBNAME)")
	{{ end }}{{ end -}}
}

func migrateSchema(cmd *cobra.Command, args []string) {
	var (
		err    error
		hasOne bool
	)

	{{ range .DbTypes }}
	// initialize the {{ lower . }} database schema
	if {{ lowerPascalCase . }}MigrateDataSourceName != "" {
		hasOne = true
		{{ if eq (len $.DbTypes) 1 }}err = models.MigrateSchema({{ lowerPascalCase . }}MigrateDataSourceName)
		{{ else }}err = models.MigrateSchema("{{ lower . }}", {{ lowerPascalCase . }}MigrateDataSourceName){{ end }}
		if err != nil {
			fmt.Printf("{{ upperPascalCase . }} schema migration error: %s\n", err)
			os.Exit(1)
		}
		fmt.Println("{{ upperPascalCase . }} database schema was successfully migrated")
	}
	{{ end }}

	if !hasOne {
		fmt.Println("No migration found")
		fmt.Println("Use one of flags :")
		{{ range .DbTypes }}fmt.Println("   --{{ lower . }}-dsn")
	{{ end }}}
}
{{ end }}
