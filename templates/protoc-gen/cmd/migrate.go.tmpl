// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package cmd

{{ if .HasDb }}
import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/fatih/color"
	"github.com/mattn/go-colorable"
	"github.com/spf13/cobra"
	log "github.com/sirupsen/logrus"

	{{ if .DbTypes }}"{{ .GoPkg }}/models"{{ end }}
	{{ range .SubServices }}{{ $ss := . }}{{ if .DbTypes }}svc{{ upperPascalCase $ss.ShortName }}Models "{{ $ss.GoPkg }}/models"
	{{ end }}{{ end }}

)

var (
	migrateCmd = &cobra.Command{
		Use:   "migrate",
		Short: "Migrates the user database schema",
		PreRun: bindFlagsToConfig,
		Run:   migrateSchema,
	}
	migrateSkipPrompt bool
	migrateOut = colorable.NewColorableStdout()
)

func init() {
	migrateCmd.PersistentFlags().BoolVarP(&migrateSkipPrompt, "skip-prompt", "y", false, "Skip interactive prompt if is set default")

	initDebugFlag(migrateCmd)
	initDbMigrateFlags(migrateCmd)
	initDbFlushFlags(migrateCmd)

	rootCmd.AddCommand(migrateCmd)
}

func askIsOK(msg string) bool {
	if os.Getenv("CI") != "" {
		return true
	}

	if msg == "" {
		msg = "Is this OK?"
	}

	fmt.Fprintf(migrateOut, "%s %ses/%so\n",
		msg,
		color.YellowString("[y]"),
		color.CyanString("[N]"),
	)

	scan := bufio.NewScanner(os.Stdin)
	scan.Scan()
	return strings.Contains(strings.ToLower(scan.Text()), "y")
}

func migrateSchema(cmd *cobra.Command, args []string) {
	var (
		err    error
		hasOne bool
	)

	if debugMode {
		log.SetLevel(log.DebugLevel)
		log.Debug("set log debug level")
	} else {
		// by default for embedded server only panic are logged
		log.SetLevel(log.PanicLevel)
	}

	{{ range .DbTypes }}
	// initialize the {{ lower . }} database schema
	if {{ lowerPascalCase . }}DataSourceName != "" {
		hasOne = true
		{{ if eq (len $.DbTypes) 1 }}err = models.MigrateSchema({{ lowerPascalCase . }}DataSourceName)
		{{ else }}err = models.MigrateSchema("{{ lower . }}", {{ lowerPascalCase . }}DataSourceName){{ end }}
		if err != nil {
			fmt.Printf("{{ upperPascalCase . }} schema migration error: %s\n", err)
			os.Exit(1)
		}
		fmt.Println("{{ upperPascalCase . }} database schema was successfully migrated")

		if {{ lowerPascalCase . }}Flush {
			if migrateSkipPrompt || askIsOK("Are you sure you want flush {{ lower . }} data ?") {
				{{ if eq (len $.DbTypes) 1 }}err = models.Flush({{ lowerPascalCase . }}DataSourceName)
				{{ else }}err = models.Flush("{{ lower . }}", {{ lowerPascalCase . }}DataSourceName){{ end }}
				if err != nil {
					fmt.Printf("{{ upperPascalCase . }} database flush error: %s\n", err)
					os.Exit(1)
				}
				fmt.Println("{{ upperPascalCase . }} database is flushed")
			}
		}
	}
	{{ end }}

	{{ range .SubServices }}{{ $ss := . }}{{ range .DbTypes }}
	// initialize the {{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }} database schema
	if svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName != "" {
		hasOne = true
		{{ if eq (len $ss.DbTypes) 1 }}err = svc{{ upperPascalCase $ss.ShortName }}Models.MigrateSchema(svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName)
		{{ else }}err = svc{{ upperPascalCase $ss.ShortName }}Models.MigrateSchema("{{ lower . }}", svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName){{ end }}
		if err != nil {
			log.Errorf("svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }} Database schema migration failure: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }} database schema was successfully migrated")

		if svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}Flush {
			if migrateSkipPrompt || askIsOK("Are you sure you want flush svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }} data ?") {
				{{ if eq (len $ss.DbTypes) 1 }}err = svc{{ upperPascalCase $ss.ShortName }}Models.Flush(svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName)
				{{ else }}err = svc{{ upperPascalCase $ss.ShortName }}Models.Flush("{{ lower . }}", svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName){{ end }}
				if err != nil {
					fmt.Printf("svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }} database flush error: %s\n", err)
					os.Exit(1)
				}
				fmt.Println("svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }} database is flushed")
			}
		}
	}
	{{ end }}{{ end }}
	if !hasOne {
		fmt.Println("No migration found")
		fmt.Println("Use one of flags :")
		{{ range .DbTypes }}fmt.Println("   --{{ lower . }}-dsn")
	{{ end }}}
}
{{ else }}
// There is nothing to generate because this service has no defined databases
{{ end }}
