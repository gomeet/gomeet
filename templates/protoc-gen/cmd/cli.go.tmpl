// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package cmd

import (
	"strings"

	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	rcli "{{ .GoPkg }}/cmd/remotecli"
)

// cliCmd represents the cli command
var (
	cliCmd     = &cobra.Command{
		Use:   "cli [gRPC service] [args...]",
		Short: "Cli on {{ .Name }} service",
		Long: `Use this command cli {{ .Name }} service

Example :
{{ cliCmdHelpString .Name .ProtoFiles }}
  $ {{ .Name }} cli --address localhost:42000 version

`,
		Run: cli,
	}
)

func init() {
	// CA certificate
	cliCmd.PersistentFlags().StringVar(&caCertificate, "ca", "", "X.509 certificate of the Certificate Authority (required for gRPC TLS support)")

	// gRPC client certificate
	cliCmd.PersistentFlags().StringVar(&clientCertificate, "cert", "", "X.509 certificate of the gRPC client (required for gRPC TLS support)")

	// gRPC client private key
	cliCmd.PersistentFlags().StringVar(&clientPrivateKey, "key", "", "RSA private key of the gRPC client (required for gRPC TLS support)")

	initServerAddressFlag(cliCmd)
	initTimeoutFlag(cliCmd)
	initJWTTokenFlag(cliCmd)
	initGrpcFlags(cliCmd)

	rootCmd.AddCommand(cliCmd)
}

func cli(cmd *cobra.Command, args []string) {
	// Cli must have at least one argument
	if len(args) < 1 {
		log.Fatal("Bad arguments")
	}

	// Initialize remote cli
	c, err := rcli.NewRemoteCli(
		svc.Name, svc.Version,
		rcli.CliCall, serverAddress, timeoutSeconds,
		caCertificate, clientCertificate, clientPrivateKey, jwtToken,
		maxRecvMsgSize, maxSendMsgSize,
	)
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	// Defer remote cli closing
	defer c.Close()

	// Convert arguments to string
	line := strings.Join(args, " ")

	// Evaluate arguments string
	ok, err := c.Eval(line)
	if err != nil {
		log.Fatal(err)
	}
	log.Info(ok)
}
