// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package cmd

import (
	"fmt"
	{{ if .DbTypes }}"os"{{ end }}

	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	{{ if .DbTypes }}"{{ .GoPkg }}/models"{{ end }}
)

var (
	debugMode          bool
	serverAddress      string
	grpcServerAddress  string
	httpServerAddress  string
	corsAllowedOrigins string
	jwtSecret          string

	// EXTRA : var
	{{ range .DbTypes }}{{ lowerPascalCase . }}Migrate        bool
	{{ lowerPascalCase . }}DataSourceName string
	{{ end }}{{ range .ExtraServeFlags }}{{ lowerPascalCase .Name }}ExtraFlag {{ .Type }}
	{{ end }}// END EXTRA : var

	// serveCmd represents the serve command
	serveCmd = &cobra.Command{
		Use:   "serve",
		Short: "Launches the {{ .Name }} service webserver",
	}
)

func init() {
	rootCmd.AddCommand(serveCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:

	// force debug mode
	serveCmd.PersistentFlags().BoolVarP(&debugMode, "debug", "d", false, "Force debug mode")

	// address flag (to serve all protocols on a single port)
	serveCmd.PersistentFlags().StringVarP(&serverAddress, "address", "a", ":13000", "Multiplexed gRPC/HTTP server address")

	// gRPC address flag (to serve gRPC on a separate address)
	serveCmd.PersistentFlags().StringVar(&grpcServerAddress, "grpc-address", "", "gRPC server address")

	// HTTP/1.1 address flag (to serve HTTP on a separate address)
	serveCmd.PersistentFlags().StringVar(&httpServerAddress, "http-address", "", "HTTP server address")

	// cors flag
	serveCmd.PersistentFlags().StringVarP(&corsAllowedOrigins, "cors", "c", "*", "Cross Origin Resource Sharing AllowedOrigins (string) separed by | ex: http://*gomeet.com|http://*example.com")

	// JWT secret signing key
	serveCmd.PersistentFlags().StringVarP(&jwtSecret, "jwt-secret", "j", "", "JSON Web Token secret signing key (required for JWT support)")

	// CA certificate
	serveCmd.PersistentFlags().StringVar(&caCertificate, "ca", "", "X.509 certificate of the Certificate Authority (required for gRPC TLS support)")

	// gRPC server certificate
	serveCmd.PersistentFlags().StringVar(&serverCertificate, "cert", "", "X.509 certificate of the gRPC server (required for gRPC TLS support)")

	// gRPC server private key
	serveCmd.PersistentFlags().StringVar(&serverPrivateKey, "key", "", "RSA private key of the gRPC server (required for gRPC TLS support)")

	// EXTRA : flags
	{{ range .DbTypes }}// {{ upperPascalCase . }} data migration on start
	serveCmd.PersistentFlags().BoolVar(&{{ lowerPascalCase . }}Migrate, "{{ lower . }}-migrate", false, "{{ upperPascalCase . }} data migration on start")
	{{ if eq . "mysql" }}// {{ upperPascalCase . }} data source name: https://github.com/go-sql-driver/{{ lower . }}#dsn-data-source-name
	serveCmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}DataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (USERNAME:PASSWORD@tcp(HOSTNAME:3306)/DBNAME)")
	{{ else if eq . "postgres" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	serveCmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}DataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (host=HOSTNAME port=DBPORT user=USERNAME dbname=DBNAME password=PASSWORD)")
	{{ else if eq . "sqlite" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	serveCmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}DataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} data source file")
	{{ else if eq . "mssql" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	serveCmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}DataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (sqlserver://USERNAME:PASSWORD@tcp(HOSTNAME:1433)?database=DBNAME)")
	{{ end }}
	{{ end }}{{ range .ExtraServeFlags }}// {{ lowerPascalCase .Name }} flag is pass to gRPC server
	serveCmd.PersistentFlags().{{ title .Type }}Var(&{{ lowerPascalCase .Name }}ExtraFlag, "{{ lowerKebabCase .Name }}", {{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }}, "{{ .Description }}")
	{{ end }}// END EXTRA : flags

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// serveCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}

func databaseMigration() {
	{{ range .DbTypes }}// {{ upperPascalCase . }} data migration on start
	if {{ lowerPascalCase . }}Migrate {
		if {{ lowerPascalCase . }}DataSourceName == "" {
			log.Errorf("The --{{ lower . }}-dsn flag is required for automatic schema migration")
			os.Exit(1)
		}

		{{ if eq (len $.DbTypes) 1 }}err := models.MigrateSchema({{ lowerPascalCase . }}DataSourceName)
		{{ else }}err := models.MigrateSchema("{{ lower . }}", {{ lowerPascalCase . }}DataSourceName){{ end }}
		if err != nil {
			log.Errorf("Database schema migration failure: %v\n", err)
			os.Exit(1)
		}
	}{{ end }}
}

func recoverFromPanic(p interface{}) error {
	log.Infof("recovering from panic: %s", p)

	return fmt.Errorf("panic in gRPC procedure: %v", p)
}
