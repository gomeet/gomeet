// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package cmd

import (
	{{ if not .CronTasks }}"errors"{{ end }}
	"fmt"
	"os"

	"github.com/spf13/cobra"
	log "github.com/sirupsen/logrus"
	{{ if .CronTasks }}"{{ .GoPkg }}/cmd/crontask"
	"{{ .GomeetPkg }}/utils/jwt"
	"{{ .GoPkg }}/cmd/functest"{{ end }}
)

var (
	taskName string

	// cronTaskCmd represents the functest command
	cronTaskCmd = &cobra.Command{
		Use:   "crontask",
		Short: "Runs tasks triggered by a time-based job scheduler like cron",
		PreRun: bindFlagsToConfig,
		Run: runCronTask,
	}
)

func init() {
	// task name
	cronTaskCmd.PersistentFlags().StringVarP(&taskName, "task", "t", "", "Name of the task to run [{{ range $i, $e := .CronTasks }}{{ if $i }}|{{ end }}{{ lowerSnakeCase $e }}{{ end }}]")

	initDebugFlag(cronTaskCmd)
	initJWTSecretFlag(cronTaskCmd)
	initJWTTokenFlag(cronTaskCmd)
	initTimeoutFlag(cronTaskCmd)
	// initServerAddressFlag(cronTaskCmd)

	initGrpcFlags(cronTaskCmd)
	initServerExtraFlags(cronTaskCmd)
	// initServerNetworkFlags(cronTaskCmd)
	initServerSubServicesNetworkFlags(cronTaskCmd)
	initServerTlsFlags(cronTaskCmd)
	initServerQueueFlags(cronTaskCmd)
	initDbDNSFlags(cronTaskCmd)
	// initDbMigrateFlags(cronTaskCmd)

	rootCmd.AddCommand(cronTaskCmd)
}

func runCronTask(cmd *cobra.Command, args []string) {
	// TODO: GOMEET use config.Get
	var taskError error

	// define log level
	if debugMode {
		log.SetLevel(log.DebugLevel)
	} else {
		log.SetLevel(log.PanicLevel)
	}

{{ if .CronTasks }}
	// if JWT is enabled, clients require a valid token
	if jwtSecret != "" {
		var err error
		jwtToken, err = jwt.Create(
			"{{ .GomeetPkg }}",
			jwtSecret,
			tokenLifetimeHours,
			subjectID,
			jwt.Claims{},
		)

		if err != nil {
			fmt.Printf("failed to create JWT : %v\n", err)
			os.Exit(1)
		}
	}

	// initialize config
	// FIXME: refactoring config to a config tree struct
	config := functest.FunctionalTestConfig{
		ServerAddress:      serverAddress,
		GrpcServerAddress:  grpcServerAddress,
		HttpServerAddress:  httpServerAddress,
		CaCertificate:      caCertificate,
		ClientCertificate:  serverCertificate,
		ClientPrivateKey:   serverPrivateKey,
		TimeoutSeconds:     timeoutSeconds,
		JsonWebTokenSecret: jwtSecret,
		JsonWebToken:       jwtToken,
		MaxRecvMsgSize:     maxRecvMsgSize,
		MaxSendMsgSize:     maxSendMsgSize,
		TokenLifetimeHours: tokenLifetimeHours,
		SubjectID:          subjectID,
		IsEmbeddedServer:   useEmbeddedServer,
		IsRandomPort:       useRandomPort,

		//extra parameters

		{{ range .DbTypes }}{{ upperPascalCase . }}DataSourceName: {{ lowerPascalCase . }}DataSourceName,
		{{ end }}
		{{ range .QueueTypes }}{{ if eq . "memory" }}{{ upperPascalCase . }}QueueWorkerCount:  {{ lowerPascalCase . }}QueueWorkerCount,
		{{ upperPascalCase . }}QueueMaxSize:  {{ lowerPascalCase . }}QueueMaxSize,
		{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
		{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
		{{ else if eq . "sqs" }}// sqs support is not yet implemented
		{{ end }}{{ end }}
		{{ range .ExtraServeFlags -}}{{ upperPascalCase .Name }}ExtraFlag: {{ lowerPascalCase .Name }}ExtraFlag,
		{{ end }}
		{{ if .SubServices -}}{{ range .SubServices }}{{ $ss := . }}Svc{{ upperPascalCase .ShortName }}Address: svc{{ upperPascalCase .ShortName }}Address,
		{{ range .DbTypes }}Svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName: svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName,
		{{ end }}
		{{ range .QueueTypes }}{{ if eq . "memory" }}Svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueWorkerCount:  svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueWorkerCount,
		Svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueMaxSize:  svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueMaxSize,
		{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
		{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
		{{ else if eq . "sqs" }}// sqs support is not yet implemented
		{{ end }}{{ end }}
		{{ range .ExtraServeFlags }}Svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag: svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag,
		{{ end }}{{ end }}{{ end }}
	}

	if taskName == "" {
		fmt.Printf("A task name must be provided with the -t/--task flag\n")
		os.Exit(1)
	}


	switch taskName {
{{ range .CronTasks }}	case "{{ lowerSnakeCase . }}":
		taskError = crontask.{{ upperPascalCase . }}(config)
{{ end }}
	default:
		taskError = fmt.Errorf("unknown task \"%s\"", taskName)
	}
{{ else }}
	taskError = errors.New("no defined tasks")
{{ end }}

	if taskError != nil {
		fmt.Printf("Error: %v\n", taskError)
		os.Exit(1)
	}

	os.Exit(0)
}
