// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package remotecli

import (
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	"golang.org/x/net/context"
	gomeetContext "{{ .GomeetPkg }}/utils/context"

	"{{ .GoPkg }}/client"
	{{ .GoProtoPkgAlias }} "{{ .GoPkg }}/{{ .GoProtoPkgAlias }}"
)

type ContextCall int

const (
	ConsoleCall ContextCall = iota // 0
	CliCall                        // 1
)

type RemoteCli interface {
	GetActionsMap() map[string]func([]string) (string, error)
	GetExtraActionsMap() map[string]func([]string) (string, error)
	GetExtraHelp() string
	Eval(line string) (string, error)
	Close()
	RemoteVersion() (*{{ .GoProtoPkgAlias }}.VersionResponse, error)
}

type remoteCli struct {
	name           string
	version        string
	ctxCall        ContextCall
	defaultTimeout int
	*client.GomeetClient
	c              {{ .GoProtoPkgAlias }}.{{ upperPascalCase .ShortName }}Client
	ctx            context.Context
}

func NewRemoteCli(
	name, version string,
	ctxCall ContextCall, addr string, timeout int,
	caCertificate, clientCertificate, clientPrivateKey, jwt string,
	maxRecvMsgSize, maxSendMsgSize int,
) (RemoteCli, error) {
	cli, err := client.NewGomeetClient(
		addr,
		timeout,
		caCertificate,
		clientCertificate,
		clientPrivateKey,
		maxRecvMsgSize,
		maxSendMsgSize,
	)

	if err != nil {
		return nil, err
	}

	// prepare the context
	ctx := gomeetContext.AuthContextFromJWT(context.Background(), jwt)

	rc := &remoteCli{
		name,
		version,
		ctxCall,
		timeout,
		cli,
		cli.GetGRPCClient(),
		ctx,
	}

	return rc, nil
}

// Close : close grpc connection `cc`
func (c *remoteCli) Close() {
	c.GomeetClient.Close()
}

func (c *remoteCli) SetDefaultTimeout(t int) {
	c.defaultTimeout = t
}

func (c *remoteCli) UnsetDefaultTimeout() {
	c.SetDefaultTimeout(0)
}

func (c *remoteCli) GetDefaultTimeout() int {
	return c.defaultTimeout
}

func (c *remoteCli) GetTimeoutContext(t int) (context.Context, context.CancelFunc) {
	if t > 0 {
		return context.WithTimeout(c.ctx, time.Duration(t)*time.Second)
	}

	return c.ctx, func() {}
}

// GetGRPCClient : getter on internal gRPC client
func (c *remoteCli) GetGRPCClient() {{ .GoProtoPkgAlias }}.{{ upperPascalCase .ShortName }}Client {
	return c.c
}

// SetNewJwt : Add update context with authorization header from jwt
func (c *remoteCli) SetJWT(jwt string) {
	c.ctx = gomeetContext.AuthContextFromJWT(context.Background(), jwt)
}

// UnsetNewJwt : unset authorization header from context
func (c *remoteCli) UnsetJWT() {
	c.ctx = context.Background()
}

func (c *remoteCli) RemoteVersion() (*{{ .GoProtoPkgAlias }}.VersionResponse, error) {
	m := &{{ .GoProtoPkgAlias }}.EmptyMessage{}
	r, err := c.c.Version(c.ctx, m)
	if err != nil {
		return nil, fmt.Errorf("Version service call fail - %v", err)
	}

	return r, nil
}

func (c *remoteCli) GetActionsMap() map[string]func([]string) (string, error) {
	actionsMap := map[string]func([]string) (string, error){
		//grpc method
{{- remoteCliGetActionMap .Name .ProtoFiles -}}
		// global method
		"console_version":           c.cmdConsoleVersion,
		"jwt":                       c.cmdJWT,
		"default_timeout":           c.cmdDefaultTimeout,
		"service_address":           c.cmdServiceAddress,
		"tls_config":                c.cmdTLSConfig,
		"help":                      c.cmdHelp,
	}

	for k, fn := range c.GetExtraActionsMap() {
		actionsMap[k] = fn
	}

	return actionsMap
}

// Eval string to gRPC call
func (c *remoteCli) Eval(line string) (string, error) {
	if len(line) == 0 {
		return "", errors.New("Bad arguments : Empty")
	}

	for k, fn := range c.GetActionsMap() {
		if strings.HasPrefix(line, k) {
			l := len(k)
			params := strings.TrimSpace(line[l:])
			args := parseParams(params)
			return fn(args)
		}
	}

	return "", fmt.Errorf("Bad arguments : %v unknow", strconv.Quote(line))
}
