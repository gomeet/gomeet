// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package functest

import (
{{ grpcFunctestHttpExtraImport .GrpcMethod.Method -}}
	"fmt"
	"net/http"

	"github.com/golang/protobuf/jsonpb"

{{ protoMessagesNeededImports false .GrpcMethod.Method.GetOutputType }}
)

func TestHttp{{ upperPascalCase .GrpcMethod.Method.Name }}(config FunctionalTestConfig) (failures []TestFailure) {
	client, serverAddr, proto, err := httpClient(config)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "{{ upperPascalCase .GrpcMethod.Method.Name }}/HTTP", Message: fmt.Sprintf("HTTP client initialization error (%v)", err)})
		return failures
	}

	var testCaseResults []*TestCaseResult
  reqs, extras, err := testGet{{ upperPascalCase .GrpcMethod.Method.Name }}Request(config)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "{{ upperPascalCase .GrpcMethod.Method.Name }}/HTTP", Message: fmt.Sprintf("HTTP testGet{{ upperPascalCase .GrpcMethod.Method.Name }}Request error (%v)", err)})
		return failures
	}

	for _, req := range reqs {
		{{ grpcFunctestHttp .GrpcMethod.Method -}}

		httpReq.Header.Add("Authorization", fmt.Sprintf("Bearer %s", config.JsonWebToken))
		httpReq.Header.Add("Content-Type", "application/json")

		resp, err := client.Do(httpReq)
		if err != nil {
			testCaseResults = append(
				testCaseResults,
				&TestCaseResult{
					req,
					nil,
					fmt.Errorf("{{ upperPascalCase .GrpcMethod.Method.Name }}/HTTP {{ httpVerb .GrpcMethod.Method }} error on %s (%v) - %v", url, err, req),
				},
			)
			continue
		}
		defer resp.Body.Close()

		res := &{{ messageGoType .GrpcMethod.Method.GetOutputType }}{}
		err = jsonpb.Unmarshal(resp.Body, res)
		testCaseResults = append(testCaseResults, &TestCaseResult{req, res, err})
	}

	return test{{ upperPascalCase .GrpcMethod.Method.Name }}Response(config, FUNCTEST_HTTP, testCaseResults, extras)
}
