// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package cmd

import (
	{{ if .SubServices }}gomeetService "github.com/gomeet/gomeet/utils/service"{{ end }}
	"github.com/spf13/cobra"
	{{ if .HasMemoryQueue }}"runtime"{{ end }}
)

var (
	debugMode          bool
	corsAllowedOrigins string
	maxRecvMsgSize     int
	maxSendMsgSize     int
	jwtSecret          string
	jwtToken           string
	caCertificate      string
	serverCertificate  string
	serverPrivateKey   string
	clientCertificate  string
	clientPrivateKey   string
	withTls            bool
	timeoutSeconds     int

	// Network addresses
	serverAddress      string
	grpcServerAddress  string
	httpServerAddress  string
{{ range .SubServices }}	svc{{ upperPascalCase .ShortName }}Address string
	svc{{ upperPascalCase .ShortName }}Tls bool
{{ end }}
	// Main server extra flags
	{{ range .ExtraServeFlags }}
	{{ lowerPascalCase .Name }}ExtraFlag {{ .Type }}
	{{ end }}// SubService extra flags{{ range .SubServices }}{{ $ss := . }}{{ range .ExtraServeFlags }}
	svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag {{ .Type }}
{{ end }}{{ end }}	//Main server databases{{ range .DbTypes }}
	{{ lowerPascalCase . }}Migrate bool
	{{ lowerPascalCase . }}Flush bool
	{{ lowerPascalCase . }}DataSourceName string
	{{ end }}
	// SubService databases{{ range .SubServices }}
	{{ $ss := . }}{{ range .DbTypes }}svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}Migrate bool
	svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}Flush bool
	svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName string
	{{ end }}{{ end }}

	// Main server queue
	{{ range .QueueTypes }}{{ if eq . "memory" }}
	{{ lowerPascalCase . }}QueueWorkerCount  int
	{{ lowerPascalCase . }}QueueMaxSize      int
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}
	// SubService queue
	{{ range .SubServices }}{{ $ss := . }}{{ range .QueueTypes }}{{ if eq . "memory" }}
	svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueWorkerCount  int
	svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueMaxSize      int
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}{{ end }}
)

func initGrpcFlags(cmd *cobra.Command) {
	// maxRecvMsgSize a ServerOption to set the max message size in bytes the server can receive
	cmd.PersistentFlags().IntVar(&maxRecvMsgSize, "max-recv-msg-size", 10, "The max message size in mega bytes the server can receive")

	// maxSendMsgSize a ServerOption to set the max message size in bytes the server can receive
	cmd.PersistentFlags().IntVar(&maxSendMsgSize, "max-send-msg-size", 10, "The max message size in mega bytes the server can send")
}

func initServerTlsFlags(cmd *cobra.Command) {
	// CA certificate
	cmd.PersistentFlags().StringVar(&caCertificate, "ca", "", "X.509 certificate of the Certificate Authority (required for gRPC TLS support)")

	// gRPC server certificate
	cmd.PersistentFlags().StringVar(&serverCertificate, "cert", "", "X.509 certificate of the gRPC server (required for gRPC TLS support)")

	// gRPC server private key
	cmd.PersistentFlags().StringVar(&serverPrivateKey, "key", "", "RSA private key of the gRPC server (required for gRPC TLS support)")
}

func initClientTlsFlags(cmd *cobra.Command) {
	// CA certificate
	cmd.PersistentFlags().StringVar(&caCertificate, "ca", "", "X.509 certificate of the Certificate Authority (required for gRPC TLS support)")

	// gRPC server certificate
	cmd.PersistentFlags().StringVar(&clientCertificate, "cert", "", "X.509 certificate of the gRPC server (required for gRPC TLS support)")

	// gRPC server private key
	cmd.PersistentFlags().StringVar(&clientPrivateKey, "key", "", "RSA private key of the gRPC server (required for gRPC TLS support)")

	// Add with tls flag
	initWithTlsFlag(cmd)
}

func initWithTlsFlag(cmd *cobra.Command) {
	// Add with tls flag
	cmd.PersistentFlags().BoolVar(&withTls, "tls", false, "Use TLS with InsecureSkipVerify: true")
}

func initServerExtraFlags(cmd *cobra.Command) {
{{ range .ExtraServeFlags }}	// {{ lowerPascalCase .Name }} flag is pass to gRPC server
	cmd.PersistentFlags().{{ title .Type }}Var(&{{ lowerPascalCase .Name }}ExtraFlag, "{{ lowerKebabCase .Name }}", {{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }}, "{{ .Description }}")
	{{ end }}{{ range .SubServices }}{{ $ss := . }}{{ range .ExtraServeFlags }}
	cmd.PersistentFlags().{{ title .Type }}Var(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lowerKebabCase .Name }}", {{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }}, "{{ .Description }}")
{{ end }}{{ end }}}

func initServerAddressFlag(cmd *cobra.Command) {
	// address flag (to serve all protocols on a single port)
  cmd.PersistentFlags().StringVarP(&serverAddress, "address", "a", ":{{ .DefaultPort }}", "Multiplexed gRPC/HTTP server address")
}

func initServerNetworkFlags(cmd *cobra.Command) {
	// HTTP/1.1 address flag (to serve HTTP on a separate address)
	cmd.PersistentFlags().StringVar(&grpcServerAddress, "grpc-address", "", "gRPC server address")

	// HTTP/1.1 address flag (to serve HTTP on a separate address)
	cmd.PersistentFlags().StringVar(&httpServerAddress, "http-address", "", "HTTP server address")

	// cors flag
	cmd.PersistentFlags().StringVarP(&corsAllowedOrigins, "cors", "c", "*", "Cross Origin Resource Sharing AllowedOrigins (string) separed by | ex: http://*gomeet.com|http://*example.com")
}

func initServerSubServicesNetworkFlags(cmd *cobra.Command) {
{{ range .SubServices }}	// {{ upperPascalCase .ShortName }} service address
	cmd.PersistentFlags().StringVar(&svc{{ upperPascalCase .ShortName }}Address, "svc-{{ lowerKebabCase .ShortName }}-address", gomeetService.INPROCESS_ADDRESS, "{{ upperPascalCase .ShortName }} service address (host:port) if empty, the sub-service is embed with svc-{{ lowerKebabCase .ShortName }}-* flags has parameters")
	// {{ upperPascalCase .ShortName }} service tls
	cmd.PersistentFlags().BoolVar(&svc{{ upperPascalCase .ShortName }}Tls, "svc-{{ lowerKebabCase .ShortName }}-tls", false, "{{ upperPascalCase .ShortName }} uses TLS with InsecureSkipVerify: true")
{{ end }}}

func initJWTSecretFlag(cmd *cobra.Command) {
	// JWT secret signing key
	cmd.PersistentFlags().StringVarP(&jwtSecret, "jwt-secret", "j", "", "JSON Web Token secret signing key (embedded server only)")
}

func initJWTTokenFlag(cmd *cobra.Command) {
	// JSON Web Token
	cmd.PersistentFlags().StringVar(&jwtToken, "jwt", "", "JSON Web Token (external server only)")
}

func initTimeoutFlag(cmd *cobra.Command) {
	// request timeout
	cmd.PersistentFlags().IntVar(&timeoutSeconds, "timeout", 5, "Request timeout in seconds")
}

func initDebugFlag(cmd *cobra.Command) {
	// force debug mode
	cmd.PersistentFlags().BoolVarP(&debugMode, "debug", "d", false, "Force debug mode")
}

func initServerQueueFlags(cmd *cobra.Command) {
{{ range .QueueTypes }}	// Main queue system
	{{ if eq . "memory" }}
	cmd.PersistentFlags().IntVar(&{{ lowerPascalCase . }}QueueWorkerCount, "{{ lower . }}-queue-worker-count", runtime.NumCPU(), "The number of spawned workers (default is num cpu)")
	cmd.PersistentFlags().IntVar(&{{ lowerPascalCase . }}QueueMaxSize, "{{ lower . }}-queue-max-size", 100, "The max size of buffered asynchronous job queue (default 100)")
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}{{ range .SubServices }}{{ $ss := . }}{{ range .QueueTypes }}
	// {{ upperPascalCase $ss.ShortName }} queue system{{ if eq . "memory" }}
	cmd.PersistentFlags().IntVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueWorkerCount, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-queue-worker-count", runtime.NumCPU(), "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} number of spawned workers (default is num cpu)")
	cmd.PersistentFlags().IntVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueMaxSize, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-queue-max-size", 100, "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} max size of buffered asynchronous job queue (default 100)")
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
{{ end }}{{ end }}{{ end }}}

func initDbDNSFlags(cmd *cobra.Command) {
{{ range .DbTypes }}{{ if eq . "mysql" }}	// {{ upperPascalCase . }} data source name: https://github.com/go-sql-driver/{{ lower . }}#dsn-data-source-name
	cmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}DataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (USERNAME:PASSWORD@tcp(HOSTNAME:PORT)/DBNAME)")
	{{ else if eq . "postgres" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	cmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}DataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (host=HOSTNAME port=DBPORT user=USERNAME dbname=DBNAME password=PASSWORD)")
	{{ else if eq . "sqlite" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	cmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}DataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} data source file")
	{{ else if eq . "mssql" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	cmd.PersistentFlags().StringVar(&{{ lowerPascalCase . }}DataSourceName, "{{ lower . }}-dsn", "", "{{ upperPascalCase . }} connection informations (sqlserver://USERNAME:PASSWORD@tcp(HOSTNAME:PORT)?database=DBNAME)")
	{{ end }}{{ end }}{{ range .SubServices }}{{ $ss := . }}{{ range .DbTypes }}{{ if eq . "mysql" }}	// {{ upperPascalCase . }} data source name: https://github.com/go-sql-driver/{{ lower . }}#dsn-data-source-name
	cmd.PersistentFlags().StringVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn", "", "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} connection informations (USERNAME:PASSWORD@tcp(HOSTNAME:PORT)/DBNAME)")
	{{ else if eq . "postgres" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	cmd.PersistentFlags().StringVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn", "", "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} connection informations (host=HOSTNAME port=DBPORT user=USERNAME dbname=DBNAME password=PASSWORD)")
	{{ else if eq . "sqlite" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	cmd.PersistentFlags().StringVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn", "", "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} data source file")
	{{ else if eq . "mssql" }}// {{ upperPascalCase . }} data source name: http://gorm.io/database.html#connecting-to-a-database
	cmd.PersistentFlags().StringVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn", "", "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} connection informations (sqlserver://USERNAME:PASSWORD@tcp(HOSTNAME:PORT)?database=DBNAME)")
{{ end }}{{ end }}{{ end }}}

func initDbMigrateFlags(cmd *cobra.Command) {
{{ range .DbTypes }}	// {{ upperPascalCase . }} data migration
	cmd.PersistentFlags().BoolVar(&{{ lowerPascalCase . }}Migrate, "{{ lower . }}-migrate", false, "{{ upperPascalCase . }} data migration on start")
{{ end }}{{ range .SubServices }}{{ $ss := . }}{{ range .DbTypes }}
	// svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }} data migration
	cmd.PersistentFlags().BoolVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}Migrate, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-migrate", false, "svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} data migration on start")
{{ end }}{{ end }}}

func initDbFlushFlags(cmd *cobra.Command) {
{{ range .DbTypes }}	// {{ upperPascalCase . }} data flush flag
	cmd.PersistentFlags().BoolVar(&{{ lowerPascalCase . }}Flush, "{{ lower . }}-flush-data", false, "Flush {{ upperPascalCase . }} data")
{{ end }}{{ range .SubServices }}{{ $ss := . }}{{ range .DbTypes }}
	// svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }} data flush flag
	migrateCmd.PersistentFlags().BoolVar(&svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}Flush, "svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-flush-data", false, "Flush svc{{ upperPascalCase $ss.ShortName }} {{ upperPascalCase . }} data")
{{ end }}{{ end }}}
