// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package cmd

import (
	"fmt"
	"os"

	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var (
	cfgFile string
	config  *viper.Viper
)

func init() {
	config = viper.New()
	cobra.OnInitialize(initConfig)
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.{{ .Name }}.yaml)")
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" {
		// Use config file from the flag.
		config.SetConfigFile(cfgFile)
	} else {
		// Find home directory.
		home, err := homedir.Dir()
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

		// Search config in home directory with name ".toto" (without extension).
		config.AddConfigPath(home)
		config.SetConfigName(".{{ .Name }}")
	}

	config.AutomaticEnv() // read in environment variables that match

	// If a config file is found, read it in.
	if err := config.ReadInConfig(); err == nil {
		fmt.Println("Using config file:", config.ConfigFileUsed())
	}
}

func bindFlagsToConfig(cmd *cobra.Command, args []string) {
	// TODO: GOMEET generate this
	if flag := cmd.PersistentFlags().Lookup("debug"); flag != nil {
		config.BindPFlag("debug", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("jwt"); flag != nil {
		config.BindPFlag("jwt", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("timeout"); flag != nil {
		config.BindPFlag("timeout", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("max-recv-msg-size"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.ProjectGroupName }}_max_recv_msg_size", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("max-send-msg-size"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.ProjectGroupName }}_max_send_msg_size", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("ca"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.ProjectGroupName }}_ca", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("cert"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.ProjectGroupName }}_cert", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("key"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.ProjectGroupName }}_key", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("jwt-secret"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.ProjectGroupName }}_jwt_secret", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("address"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.Name }}_address", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("grpc-address"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.Name }}_grpc_address", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("http-address"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.Name }}_http_address", flag)
	}

	if flag := cmd.PersistentFlags().Lookup("cors"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.Name }}_cors", flag)
	}

	{{ range .SubServices }}// {{ upperPascalCase .ShortName }} service address
	if flag := cmd.PersistentFlags().Lookup("svc-{{ lowerKebabCase .ShortName }}-address"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase .Name }}_address", flag)
	}
	{{ end }}
	// Extra flags
	{{ range .ExtraServeFlags }}
	if flag := cmd.PersistentFlags().Lookup("{{ lowerKebabCase .Name }}"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.Name }}_{{ lowerSnakeCase .Name }}", flag)
	}
	{{ end }}{{ range .SubServices }}{{ $ss := . }}{{ range .ExtraServeFlags }}
	if flag := cmd.PersistentFlags().Lookup("svc-{{ lowerKebabCase $ss.ShortName }}-{{ lowerKebabCase .Name }}"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $ss.Name }}_{{ lowerSnakeCase .Name }}", flag)
	}
	{{ end }}{{ end }}
	// Queue
	{{ range .QueueTypes }}
	{{ if eq . "memory" }}
	if flag := cmd.PersistentFlags().Lookup("{{ lower . }}-queue-worker-count"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.Name }}_{{ lower . }}_queue_worker_count", flag)
	}
	if flag := cmd.PersistentFlags().Lookup("{{ lower . }}-queue-max-size"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.Name }}_{{ lower . }}_queue_max_size", flag)
	}
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}
	{{ range .SubServices }}{{ $ss := . }}{{ range .QueueTypes }}
	{{ if eq . "memory" }}
	if flag := cmd.PersistentFlags().Lookup("svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-queue-worker-count"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $ss.Name }}_{{ lower . }}_queue_worker_count", flag)
	}
	if flag := cmd.PersistentFlags().Lookup("svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-queue-max-size"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $ss.Name }}_{{ lower . }}_queue_max_size", flag)
	}
	{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
	{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
	{{ else if eq . "sqs" }}// sqs support is not yet implemented
	{{ end }}{{ end }}{{ end }}

	{{ range .DbTypes }}
	if flag := cmd.PersistentFlags().Lookup("{{ lower . }}-dsn"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $.Name }}_{{ lower . }}_dsn", flag)
	}
	{{ end }}
	{{ range .SubServices }}{{ $ss := . }}{{ range .DbTypes }}
	if flag := cmd.PersistentFlags().Lookup("svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-dsn"); flag != nil {
		config.BindPFlag("{{ lowerSnakeCase $ss.Name }}_{{ lower . }}_dsn", flag)
	}
	{{ end }}{{ end }}
}

