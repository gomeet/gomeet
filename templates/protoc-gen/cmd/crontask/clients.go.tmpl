// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
package crontask

{{ if not .SubServices }}//{{ end }}import (
{{ if not .SubServices }}//{{ end }}	"context"

{{ if not .SubServices }}//{{ end }}	log "github.com/sirupsen/logrus"
{{ if not .SubServices }}//{{ end }}	"github.com/fullstorydev/grpchan"
{{ if not .SubServices }}//{{ end }}	"github.com/fullstorydev/grpchan/inprocgrpc"

{{ if not .SubServices }}//{{ end }}	gomeetContext "github.com/gomeet/gomeet/utils/context"
{{ if not .SubServices }}//{{ end }}	gomeetService "github.com/gomeet/gomeet/utils/service"

{{ if not .SubServices }}//{{ end }}	"{{ .GoPkg }}/cmd/functest"

	{{ range .SubServices }}svc{{ upperPascalCase .ShortName }}Client "{{ .GoPkg }}/client"
	svc{{ upperPascalCase .ShortName }}Service "{{ .GoPkg }}/service"
	{{ end }}
{{ if not .SubServices }}//{{ end }})

const grpcTimeout = 5

{{ range .SubServices }}{{ $ss := . }}//{{ lowerPascalCase .ShortName }}Client initializes the gRPC client connecting to the "{{ .Name }}" service.
func {{ lowerPascalCase .ShortName }}Client(config functest.FunctionalTestConfig) (client *svc{{ upperPascalCase .ShortName }}Client.GomeetClient, ctx context.Context, err error)  {
	if config.Svc{{ upperPascalCase .ShortName }}Address == gomeetService.INPROCESS_ADDRESS {
		svc := svc{{ upperPascalCase .ShortName }}Service.NewService(gomeetService.INPROCESS_ADDRESS)

		sInterceptors, uInterceptors := gomeetService.Interceptors()
		subServiceshandlers := grpchan.HandlerMap{}

		inProcessChannel := new(inprocgrpc.Channel)
		reg := grpchan.WithInterceptor(subServiceshandlers, uInterceptors, sInterceptors)

		svc.RegisterGRPCServices(
			reg, inProcessChannel,
			config.JsonWebTokenSecret, config.CaCertificate, config.ClientCertificate, config.ClientPrivateKey,
			config.MaxRecvMsgSize, config.MaxSendMsgSize,
			{{ range .DbTypes }}config.Svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}DataSourceName, {{ end -}}
			{{ range .QueueTypes }}{{ if eq . "memory" }}config.Svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueWorkerCount, config.Svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase . }}QueueMaxSize,
			{{ else if eq . "rabbitmq" }}// rabbitmq support is not yet implemented
			{{ else if eq . "zeromq" }}// zeromq support is not yet implemented
			{{ else if eq . "sqs" }}// sqs support is not yet implemented
			{{ end }}{{ end -}}
			{{ range .ExtraServeFlags }}config.Svc{{ upperPascalCase $ss.ShortName }}{{ upperPascalCase .Name }}ExtraFlag, {{ end -}}
			{{ range .SubServices }}gomeetService.INPROCESS_ADDRESS, {{ end }}
		)

		subServiceshandlers.ForEach(inProcessChannel.RegisterService)

		client, err = svc{{ upperPascalCase .ShortName }}Client.NewGomeetInProcessClient(inProcessChannel)
	} else {
		log.Debug("Init remote client for svc{{ upperPascalCase .ShortName}}")
		client, err = svc{{ upperPascalCase .ShortName }}Client.NewGomeetClient(
			config.Svc{{ upperPascalCase .ShortName }}Address,
			grpcTimeout,
			config.CaCertificate, config.ClientCertificate, config.ClientPrivateKey,
			config.MaxRecvMsgSize, config.MaxSendMsgSize,
		)
	}

	if err != nil {
		return nil, nil, err
	}

	ctx = gomeetContext.AuthContextFromJWT(context.Background(), config.JsonWebToken)

	return client, ctx, nil
}

{{ end }}

