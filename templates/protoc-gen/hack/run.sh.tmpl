#!/bin/sh
# Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
# source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
#
# Usage :
#   run.sh [force inprocess execution<1|true|t|yes|y|inprocgrpc>]
#
# if ./run-env.sh exists it's loaded. So you can define custom environment variables inside this file
#
#   {{ upperSnakeCase .ProjectGroupName }}_PATH="$GOPATH/src/{{ .ProjectGroupGoPkg }}"
#   {{ upperSnakeCase .ProjectGroupName }}_EXEC_TYPE="make" # go, make
#   {{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET=""
#   {{ upperSnakeCase .Name }}_ADDRESS=":13000"
{{ range .SubServices -}}{{ $ss := . }}#   {{ upperSnakeCase $ss.Name }}_ADDRESS="inprocgrpc"
{{ end -}}
{{ range .DbTypes -}}
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_MIGRATE="true"
{{ end -}}
{{ range .SubServices -}}{{ $ss := . }}{{ range .DbTypes -}}
#   SVC_{{ upperSnakeCase $ss.ShortName }}_{{ upperSnakeCase . }}_MIGRATE="true"
{{ end -}}{{ end -}}
{{ range .DbTypes }}{{ if eq . "mysql" }}
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT="3306"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $.Name }}"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN="${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME:${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD@tcp(${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER:${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT)/${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE"
{{ else if eq . "postgres" }}
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT="5432"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $.Name }}"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN="host=tcp(${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER port=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT) user=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME dbname=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE password=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD"
{{ else if eq . "sqlite" }}
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN="/tmp/{{ lowerSnakeCase $.Name }}.sqlite3.db"
{{ else if eq . "mssql" }}
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT="1433"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $.Name }}"
#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN="sqlserver://${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME:${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD@${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER:${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT?database=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE"
{{ end }}
{{ end -}}
{{ range .SubServices }}{{ $ss := . }}{{ range .DbTypes }}
{{ if eq . "mysql" }}
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT="3306"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $ss.Name }}"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN="${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME:${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD@tcp(${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER:${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT)/${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE"
{{ else if eq . "postgres" }}
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT="5432"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $ss.Name }}"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN="host=tcp(${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER port=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT) user=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME dbname=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE password=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD"
{{ else if eq . "sqlite" }}
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN="/tmp/{{ lowerSnakeCase $ss.Name }}.sqlite3.db"
{{ else if eq . "mssql" }}
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT="1433"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $ss.Name }}"
#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN="sqlserver://${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME:${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD@${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER:${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT?database=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE"
{{ end }}{{ end }}{{ end -}}
{{ range .ExtraServeFlags }}#   {{ upperSnakeCase $.Name }}_{{ upperSnakeCase .Name }}={{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }} #{{ $.Name }}: {{ .Description }}
{{ end -}}
{{ range .SubServices }}{{ $ss := . }}{{ range .ExtraServeFlags }}#   {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase .Name }}={{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }} #{{ $ss.Name }}: {{ .Description }}
{{ end -}}
{{ end }}

########
# init #
########
trap killgroup 2

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")

GOARCH=$(go env GOARCH)
GOOS=$(go env GOOS)

killgroup(){
	echo killing...
	kill 0
}

if [ -s "$SCRIPTPATH/run-env.sh" ];
then
	. "$SCRIPTPATH/run-env.sh"
fi;

###########################################
# set environment variables if not exists #
###########################################
{{ upperSnakeCase .ProjectGroupName }}_PATH="$GOPATH/src/{{ .ProjectGroupGoPkg }}"
[ -z "${{ upperSnakeCase .ProjectGroupName }}_EXEC_TYPE" ] && {{ upperSnakeCase .ProjectGroupName }}_EXEC_TYPE="make" # go, make
[ -z "${{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET" ] && {{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET=""
[ -z "${{ upperSnakeCase .Name }}_ADDRESS" ] && {{ upperSnakeCase .Name }}_ADDRESS=":13000"
{{ range .SubServices -}}{{ $ss := . }}[ -z "${{ upperSnakeCase $ss.Name }}_ADDRESS" ] && {{ upperSnakeCase $ss.Name }}_ADDRESS="inprocgrpc"
{{ end -}}
{{ range .DbTypes -}}
[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_MIGRATE" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_MIGRATE="true"
{{ end -}}
{{ range .SubServices -}}{{ $ss := . }}{{ range .DbTypes -}}
[ -z "$SVC_{{ upperSnakeCase $ss.ShortName }}_{{ upperSnakeCase . }}_MIGRATE" ] && SVC_{{ upperSnakeCase $ss.ShortName }}_{{ upperSnakeCase . }}_MIGRATE="true"
{{ end -}}{{ end -}}
{{ range .DbTypes }}{{ if eq . "mysql" }}if [ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN" ]
then
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT="3306"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $.Name }}"
	{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN="${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME:${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD@tcp(${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER:${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT)/${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE"
fi;{{ else if eq . "postgres" }}if [ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN" ]
then
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT="5432"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $.Name }}"
	{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN="host=tcp(${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER port=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT) user=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME dbname=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE password=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD"
fi;{{ else if eq . "sqlite" }}if [ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN" ]
then
	{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN="/tmp/{{ lowerSnakeCase $.Name }}.sqlite3.db"
fi;{{ else if eq . "mssql" }}if [ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN" ]
then
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT="1433"
	[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $.Name }}"
	{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN="sqlserver://${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME:${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD@${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_SERVER:${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PORT?database=${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE"
fi;{{ end }}
{{ end -}}
{{ range .SubServices }}{{ $ss := . }}{{ range .DbTypes }}
{{ if eq . "mysql" }}if [ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN" ]
then
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT="3306"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $ss.Name }}"
	{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN="${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME:${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD@tcp(${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER:${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT)/${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE"
fi;{{ else if eq . "postgres" }}if [ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN" ]
then
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT="5432"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $ss.Name }}"
	{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN="host=tcp(${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER port=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT) user=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME dbname=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE password=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD"
fi;{{ else if eq . "sqlite" }}if [ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN" ]
then
	{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN="/tmp/{{ lowerSnakeCase $ss.Name }}.sqlite3.db"
fi;{{ else if eq . "mssql" }}if [ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN" ]
then
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME="gomeet"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD="toto{{ lower . }}"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER="localhost"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT="1433"
	[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE="{{ lowerSnakeCase $ss.Name }}"
	{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN="sqlserver://${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME:${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD@${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_SERVER:${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PORT?database=${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE"
fi;{{ end }}
{{ end -}}
{{ end }}
{{ range .ExtraServeFlags }}[ -z "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase .Name }}" ] && {{ upperSnakeCase $.Name }}_{{ upperSnakeCase .Name }}={{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }} #{{ $.Name }}: {{ .Description }}
{{ end -}}
{{ range .SubServices }}{{ $ss := . }}{{ range .ExtraServeFlags }}[ -z "${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase .Name }}" ] && {{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase .Name }}={{ if eq .Type "string" }}"{{ end }}{{ .DefaultValue }}{{ if eq .Type "string" }}"{{ end }} #{{ $ss.Name }}: {{ .Description }}
{{ end -}}
{{ end }}

############################################
# define excution's flags of each services #
############################################
case "$1" in
	"1"|1|"yes"|"y"|"true"|"t"|"YES"|"Y"|"TRUE"|"T")
		echo "[Warn] - Force inprocess subservices execution"
		{{ range .SubServices -}}{{ $ss := . }}{{ upperSnakeCase $ss.Name }}_ADDRESS="inprocgrpc"
		{{ end -}}
	;;
esac
{{ upperSnakeCase $.Name }}_SERVER_OPTS='serve
	-d
	--jwt-secret="${{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET"'
{{ range .SubServices -}}{{ $ss := . }}{{ upperSnakeCase $ss.Name }}_SERVER_OPTS='serve
	-d
	--jwt-secret="${{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET"'
{{ end }}
{{ upperSnakeCase $.Name }}_SERVER_OPTS_MIGRATE=''
{{ range .SubServices -}}{{ $ss := . }}{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_MIGRATE=''
{{ end }}
{{ range .DbTypes -}}
case "${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_MIGRATE" in
	"true"|"1"|1|true|"t"|"yes"|"y")
		{{ upperSnakeCase $.Name }}_SERVER_OPTS_MIGRATE="${{ upperSnakeCase $.Name }}_SERVER_OPTS_MIGRATE --{{ lowerKebabCase . }}-migrate"
	;;
esac
{{ end -}}
{{ range .SubServices -}}{{ $ss := . }}{{ range .DbTypes -}}
case "$SVC_{{ upperSnakeCase $ss.ShortName }}_{{ upperSnakeCase . }}_MIGRATE" in
	"true"|"1"|1|true|"t"|"yes"|"y")
		{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_MIGRATE="${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_MIGRATE --svc-{{ lowerKebabCase $ss.ShortName }}-{{ lower . }}-migrate"
	;;
esac
{{ end }}{{ end }}
{{ upperSnakeCase $.Name }}_SERVER_OPTS_DSN='{{ range .DbTypes -}}--{{ lowerKebabCase . }}-dsn="${{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DSN"
{{ end -}}'
{{ range .SubServices -}}{{ $ss := . }}
{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_DSN='{{ range .DbTypes -}}--{{ lowerKebabCase . }}-dsn="${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN"
{{ end -}}'
{{ end }}
{{ range .SubServices -}}{{ $ss := . }}
{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_DSN_EMBED='{{ range .DbTypes -}}--svc-{{ lowerKebabCase $ss.ShortName }}-{{ lowerKebabCase . }}-dsn="${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DSN"
{{ end -}}'
{{ end }}
{{ upperSnakeCase $.Name }}_SERVER_OPTS_EXTRAFLAGS='{{ range .ExtraServeFlags -}}--{{ lowerKebabCase .Name }}="${{ upperSnakeCase $.Name }}_{{ upperSnakeCase .Name }}"
{{ end -}}'
{{ range .SubServices -}}{{ $ss := . }}
{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_EXTRAFLAGS='{{ range .ExtraServeFlags -}}--{{ lowerKebabCase .Name }}="${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase .Name }}"
{{ end -}}'
{{ end -}}
{{ range .SubServices -}}{{ $ss := . }}
{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_EXTRAFLAGS_EMBED='{{ range .ExtraServeFlags -}}--svc-{{ lowerKebabCase $ss.ShortName }}-{{ lowerKebabCase .Name }}="${{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase .Name }}"
{{ end -}}'
{{ end -}}
{{ upperSnakeCase $.Name }}_SERVER_OPTS_ADDR='--address="${{ upperSnakeCase .Name }}_ADDRESS"
'
{{ range .SubServices -}}{{ $ss := . }}{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_ADDR='--address="${{ upperSnakeCase $ss.Name }}_ADDRESS"
'
{{ end -}}
{{ upperSnakeCase $.Name }}_SERVER_OPTS_ADDR_EMBED='--svc-{{ lowerKebabCase .ShortName }}-address="${{ upperSnakeCase .Name }}_ADDRESS"
'
{{ range .SubServices -}}{{ $ss := . }}{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_ADDR_EMBED='--svc-{{ lowerKebabCase $ss.ShortName }}-address="${{ upperSnakeCase $ss.Name }}_ADDRESS"
'
{{ end }}
{{ range .SubServices -}}{{ $ss := . }}
case "${{ upperSnakeCase $ss.Name }}_ADDRESS" in
	""|"inprocgrpc")
		{{ if .ExtraServeFlags -}}
		{{ upperSnakeCase $.Name }}_SERVER_OPTS_EXTRAFLAGS=${{ upperSnakeCase $.Name }}_SERVER_OPTS_EXTRAFLAGS" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_EXTRAFLAGS_EMBED
		{{ end -}}
		{{ if .DbTypes -}}
		{{ upperSnakeCase $.Name }}_SERVER_OPTS_MIGRATE=${{ upperSnakeCase $.Name }}_SERVER_OPTS_MIGRATE" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_MIGRATE_EMBED
		{{ upperSnakeCase $.Name }}_SERVER_OPTS_DSN=${{ upperSnakeCase $.Name }}_SERVER_OPTS_DSN" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_DSN_EMBED
		{{ end -}}
	;;
	*)
		{{ upperSnakeCase $.Name }}_SERVER_OPTS_ADDR=${{ upperSnakeCase $.Name }}_SERVER_OPTS_ADDR" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_ADDR_EMBED
	;;
esac
{{ end }}
{{ upperSnakeCase $.Name }}_SERVER_OPTS=${{ upperSnakeCase $.Name }}_SERVER_OPTS" "${{ upperSnakeCase $.Name }}_SERVER_OPTS_MIGRATE
{{ upperSnakeCase $.Name }}_SERVER_OPTS=${{ upperSnakeCase $.Name }}_SERVER_OPTS" "${{ upperSnakeCase $.Name }}_SERVER_OPTS_DSN
{{ upperSnakeCase $.Name }}_SERVER_OPTS=${{ upperSnakeCase $.Name }}_SERVER_OPTS" "${{ upperSnakeCase $.Name }}_SERVER_OPTS_EXTRAFLAGS
{{ upperSnakeCase $.Name }}_SERVER_OPTS=${{ upperSnakeCase $.Name }}_SERVER_OPTS" "${{ upperSnakeCase $.Name }}_SERVER_OPTS_ADDR
{{ range .SubServices }}{{ $ss := . }}{{ range .SubServices }}{{ $sss := . }}
case "${{ upperSnakeCase $sss.Name }}_ADDRESS" in
	""|"inprocgrpc")
		{{ if .ExtraServeFlags -}}
		{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_EXTRAFLAGS=${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_EXTRAFLAGS" "${{ upperSnakeCase $sss.Name }}_SERVER_OPTS_EXTRAFLAGS_EMBED
		{{ end -}}
		{{ if .DbTypes -}}
		{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_MIGRATE=${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_MIGRATE" "${{ upperSnakeCase $sss.Name }}_SERVER_OPTS_MIGRATE_EMBED
		{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_DSN=${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_DSN" "${{ upperSnakeCase $sss.Name }}_SERVER_OPTS_DSN_EMBED
		{{ end -}}
	;;
	*)
		{{ upperSnakeCase $ss.Name }}_SERVER_OPTS_ADDR=${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_ADDR" "${{ upperSnakeCase $sss.Name }}_SERVER_OPTS_ADDR_EMBED
	;;
esac
{{ end }}{{ end }}
{{ range .SubServices -}}{{ $ss := . }}
{{ upperSnakeCase $ss.Name }}_SERVER_OPTS=${{ upperSnakeCase $ss.Name }}_SERVER_OPTS" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_MIGRATE
{{ upperSnakeCase $ss.Name }}_SERVER_OPTS=${{ upperSnakeCase $ss.Name }}_SERVER_OPTS" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_DSN
{{ upperSnakeCase $ss.Name }}_SERVER_OPTS=${{ upperSnakeCase $ss.Name }}_SERVER_OPTS" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_EXTRAFLAGS
{{ upperSnakeCase $ss.Name }}_SERVER_OPTS=${{ upperSnakeCase $ss.Name }}_SERVER_OPTS" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS_ADDR
{{ end }}

##############################
# launch all needed services #
##############################
{{ range .SubServices }}{{ $ss := . }}
case "${{ upperSnakeCase $ss.Name }}_ADDRESS" in
	""|"inprocgrpc")
		echo "[Skip] - ./{{ lowerKebabCase $ss.Name }} "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS
	;;
	*)
		cd ${{ upperSnakeCase $.ProjectGroupName }}_PATH/{{ lowerKebabCase $ss.Name }}
		case ${{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE in
			"go")
				CMD='CGO_ENABLED=0 go run
					-ldflags "-extldflags \"-lm -lstdc++ -static\""
					-ldflags "-X {{ $ss.GoPkg }}/service.version=$(cat VERSION) -X {{ $ss.GoPkg }}/service.name={{ lowerKebabCase $ss.Name }}"
					main.go'
				EXEC=$CMD" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS" &"
				echo "[Exec] - "$EXEC
				eval $EXEC
				break
			;;
			"make")
				CMD='make && _build/{{ lowerKebabCase $ss.Name }}'
				EXEC=$CMD" "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS" &"
				echo "[Exec] - "$EXEC
				eval $EXEC
				break
			;;
			*)
				echo "[Erro] - unknow ${{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE value for {{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE [go|make] allowed"
				echo "[Fail] - to launch server : "
				echo "[Fail] - {{ lowerKebabCase $ss.Name }} " ${{ upperSnakeCase $ss.Name }}_SERVER_OPTS
				eval echo "[Fail] - {{ lowerKebabCase $ss.Name }} "${{ upperSnakeCase $ss.Name }}_SERVER_OPTS
			;;
		esac
	;;
esac
{{ end }}
cd ${{ upperSnakeCase $.ProjectGroupName }}_PATH/{{ lowerKebabCase $.Name }}
case ${{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE in
	"go")
		CMD='CGO_ENABLED=0 go run
			-ldflags "-extldflags \"-lm -lstdc++ -static\""
			-ldflags "-X {{ $.GoPkg }}/service.version=$(cat VERSION) -X {{ $.GoPkg }}/service.name={{ lowerKebabCase $.Name }}"
			main.go'
		EXEC=$CMD" "${{ upperSnakeCase $.Name }}_SERVER_OPTS
		echo "[Exec] - "$EXEC
		eval $EXEC
		break
	;;
	"make")
		CMD='make && _build/{{ lowerKebabCase $.Name }}'
		EXEC=$CMD" "${{ upperSnakeCase $.Name }}_SERVER_OPTS
		echo "[Exec] - "$EXEC
		eval $EXEC
		break
	;;
	*)
		echo "[Erro] - unknow ${{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE value for {{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE [go|make] allowed"
		echo "[Fail] - to launch server : "
		echo "[Fail] - {{ lowerKebabCase $.Name }} " ${{ upperSnakeCase $.Name }}_SERVER_OPTS
		eval echo "[Fail] - {{ lowerKebabCase $.Name }} "${{ upperSnakeCase $.Name }}_SERVER_OPTS
	;;
esac

wait
