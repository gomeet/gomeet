#!/bin/sh
# Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
# source:{{ range .ProtoFiles }} {{.Name}}{{ end }}
#
# Usage :
#   run.sh [force inprocess execution<1|true|t|yes|y|inprocgrpc>]
#
# if ./run-env.sh exists it's loaded. So you can define custom environment variables inside this file
#
#   {{ upperSnakeCase .ProjectGroupName }}_PATH="$GOPATH/src/{{ .ProjectGroupGoPkg }}"
#   {{ upperSnakeCase .ProjectGroupName }}_EXEC_TYPE="make" # go, make
#   {{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET=""
#   {{ upperSnakeCase .ProjectGroupName }}_MAX_RECV_MSG_SIZE=10
#   {{ upperSnakeCase .ProjectGroupName }}_MAX_SEND_MSG_SIZE=10
#   {{ upperSnakeCase .Name }}_ADDRESS=":{{ .DefaultPort }}"

########
# init #
########
SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")

if [ -f "$SCRIPTPATH/run-env.sh" ];
then
	. "$SCRIPTPATH/run-env.sh"
fi;

###########################################
# set environment variables if not exists #
###########################################
{{ upperSnakeCase .ProjectGroupName }}_PATH="$GOPATH/src/{{ .ProjectGroupGoPkg }}"
[ -z "${{ upperSnakeCase .ProjectGroupName }}_EXEC_TYPE" ] && {{ upperSnakeCase .ProjectGroupName }}_EXEC_TYPE="make" # go, make
[ -z "${{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET" ] && {{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET=""
[ -z "${{ upperSnakeCase .ProjectGroupName }}_MAX_RECV_MSG_SIZE" ] && {{ upperSnakeCase .ProjectGroupName }}_MAX_RECV_MSG_SIZE=10
[ -z "${{ upperSnakeCase .ProjectGroupName }}_MAX_SEND_MSG_SIZE" ] && {{ upperSnakeCase .ProjectGroupName }}_MAX_SEND_MSG_SIZE=10
[ -z "${{ upperSnakeCase .Name }}_ADDRESS" ] && {{ upperSnakeCase .Name }}_ADDRESS=":{{ .DefaultPort }}"

##################
# launch console #
##################
cd ${{ upperSnakeCase $.ProjectGroupName }}_PATH/{{ lowerKebabCase $.Name }}
{{ upperSnakeCase $.Name }}_CONSOLE_OPTS='console --address="${{ upperSnakeCase .Name }}_ADDRESS"
	--max-recv-msg-size="${{ upperSnakeCase .ProjectGroupName }}_MAX_RECV_MSG_SIZE"
	--max-send-msg-size="${{ upperSnakeCase .ProjectGroupName }}_MAX_SEND_MSG_SIZE"
'
case ${{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE in
	"go")
		CMD='CGO_ENABLED=0 go run
			-ldflags "-extldflags \"-lm -lstdc++ -static\""
			-ldflags "-X {{ $.GoPkg }}/service.version=$(cat VERSION) -X {{ $.GoPkg }}/service.name={{ lowerKebabCase $.Name }}"
			main.go'
		{{ upperSnakeCase $.Name }}_CONSOLE_OPTS_JWT=''
		[ -z "${{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET" ] || {{ upperSnakeCase $.Name }}_CONSOLE_OPTS_JWT='--jwt $('$CMD' token -k "${{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET")'
		EXEC=$CMD" "${{ upperSnakeCase $.Name }}_CONSOLE_OPTS" "${{ upperSnakeCase $.Name }}_CONSOLE_OPTS_JWT
		echo "[Exec] - "$EXEC
		eval $EXEC
		break
		;;
	"make")
		CMD='_build/{{ lowerKebabCase $.Name }}'
		{{ upperSnakeCase $.Name }}_CONSOLE_OPTS_JWT=''
		[ -z "${{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET" ] || {{ upperSnakeCase $.Name }}_CONSOLE_OPTS_JWT='--jwt $('$CMD' token -k "${{ upperSnakeCase .ProjectGroupName }}_JWT_SECRET")'
		EXEC="make && "$CMD" "${{ upperSnakeCase $.Name }}_CONSOLE_OPTS" "${{ upperSnakeCase $.Name }}_CONSOLE_OPTS_JWT
		echo "[Exec] - "$EXEC
		eval $EXEC
		break
		;;
	*)
		echo "[Erro] - unknow ${{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE value for {{ upperSnakeCase $.ProjectGroupName }}_EXEC_TYPE [go|make] allowed"
		echo "[Fail] - to launch server : "
		echo "[Fail] - {{ lowerKebabCase $.Name }} " ${{ upperSnakeCase $.Name }}_CONSOLE_OPTS
		eval echo "[Fail] - {{ lowerKebabCase $.Name }} "${{ upperSnakeCase $.Name }}_CONSOLE_OPTS
		;;
esac
