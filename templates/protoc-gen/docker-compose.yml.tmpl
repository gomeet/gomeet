version: "3"

volumes:
{{ range .DbTypes }}  db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $.Name }}_data: {}
{{ end }}{{ range .SubServices }}{{ $ss := . }}{{ range .DbTypes }}  db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $ss.Name }}_data: {}
{{ end }}{{ end }}  prometheus_data: {}
  grafana_data: {}

networks:
{{ if .HasDb }}  db:
    driver: bridge
{{ end }}  grpc:
    driver: bridge
  http:
    driver: bridge
  monitoring-front:
    driver: bridge
  monitoring-back:
    driver: bridge

services:
  #############
  # Databases #
  #############
{{ range .DbTypes }}
{{ if eq . "mysql" }}  db-{{ lowerKebabCase . }}-{{ lowerKebabCase $.Name }}:
      image: mariadb
      restart: always
      environment:
        MYSQL_USER: ${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME{{ "}"}}
        MYSQL_PASSWORD: ${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}
        MYSQL_DATABASE: ${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
        MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      volumes:
        - db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $.Name }}_data:/var/lib/mysql
      networks:
        - db
{{ else if eq . "postgres" }}  db-{{ lowerKebabCase . }}-{{ lowerKebabCase $.Name }}:
      image: {{ if $.HasPostgis }}kartoza/postgis{{ else }}postgres{{ end }}
      restart: always
      environment:
        POSTGRES_USER: ${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME{{ "}"}}
        POSTGRES_PASSWORD: ${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}
        POSTGRES_DB: ${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
        PGDATA: /var/lib/postgresql/data/pgdata
      volumes:
        - db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $.Name }}_data:/var/lib/postgresql/data/pgdata
      networks:
        - db
{{ else if eq . "mssql" }}  db-{{ lowerKebabCase . }}-{{ lowerKebabCase $.Name }}:
      image: microsoft/mssql-server-linux
      environment:
        ACCEPT_EULA: Y
        SA_PASSWORD: ${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}
      ports:
        - "1433:1433"
      volumes:
        - db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $.Name }}_data:/var/opt/mssql/data
{{ end }}{{ end }}
{{ range .SubServices }}{{ $ss := . }}{{ range $ss.DbTypes }}
{{ if eq . "mysql" }}  db-{{ lowerKebabCase . }}-{{ lowerKebabCase $ss.Name }}:
      image: mariadb
      restart: always
      environment:
        MYSQL_USER: ${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME{{ "}"}}
        MYSQL_PASSWORD: ${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}
        MYSQL_DATABASE: ${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
        MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      volumes:
        - db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $ss.Name }}_data:/var/lib/mysql
      networks:
        - db
{{ else if eq . "postgres" }}  db-{{ lowerKebabCase . }}-{{ lowerKebabCase $ss.Name }}:
      image: postgres
      restart: always
      environment:
        POSTGRES_USER: ${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME{{ "}"}}
        POSTGRES_PASSWORD: ${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}
        POSTGRES_DB: ${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
        PGDATA: /var/lib/postgresql/data/pgdata
      volumes:
        - db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $ss.Name }}_data:/var/lib/postgresql/data/pgdata
      networks:
        - db
{{ else if eq . "mssql" }}  db-{{ lowerKebabCase . }}-{{ lowerKebabCase $ss.Name }}:
      image: microsoft/mssql-server-linux
      environment:
        ACCEPT_EULA: Y
        SA_PASSWORD: ${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}
      ports:
        - "1433:1433"
      volumes:
        - db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $ss.Name }}_data:/var/opt/mssql/data
{{ end }}{{ end }}{{ end }}

  ############
  # Services #
  ############
  svc-{{ .ShortName }}:
    build: ./
    image: {{ .ProjectGroupName }}/{{ .Name }}:${TAG}
    command: serve --jwt-secret=${JWT_SECRET} --max-recv-msg-size=${MAX_RECV_MSG_SIZE} --max-send-msg-size=${MAX_SEND_MSG_SIZE}{{ range .SubServices }} --svc-{{ .ShortName }}-address="svc-{{ .ShortName }}:{{ .DefaultPort }}"{{ end }}{{ range .DbTypes }} --{{ lowerKebabCase . }}-migrate --{{ lowerKebabCase . }}-dsn="
{{- if eq . "mysql" -}}${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_USERNAME{{ "}"}}:${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}@tcp(db-{{ lowerKebabCase . }}-{{ lowerKebabCase $.Name }}:3306)/${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
{{- else if eq . "postgres" }}host=db-{{ lowerKebabCase . }}-{{ lowerKebabCase $.Name }} port=5432 user=${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_USERNAME{{ "}"}} password=${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}} dbname=${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
{{- else if eq . "sqlite" }}/db/${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_FILE{{ "}"}}
{{- else if eq . "mssql" }}sqlserver://sa:${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}@db-{{ lowerKebabCase . }}-{{ lowerKebabCase $.Name }}:1433?database=${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
{{- end }}"{{ end }}{{ range .ExtraServeFlags }} --{{ lowerKebabCase .Name }}="${{ "{" }}{{ upperSnakeCase $.Name }}_{{ upperSnakeCase .Name }}{{ "}" }}"{{ end }}
    #deploy:
    #  replicas: 5
    #  resources:
    #    limits:
    #      cpus: "0.1"
    #      memory: 50M
    #  restart_policy:
    #    condition: on-failure
    ports:
      - 8383:{{ .DefaultPort }}
{{ if .DbTypes }}{{ range .DbTypes }}{{ if eq . "sqlite" }}    volume:
      - db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $.Name }}_data:/db/{{ end }}{{ end }}{{ end }}
    depends_on:
{{ if .DbTypes }}{{ range .DbTypes }}      - db-{{ lowerKebabCase . }}-{{ lowerKebabCase $.Name }}
{{ end }}{{ end }}{{ if .SubServices }}{{ range .SubServices }}      - svc-{{ .ShortName }}
{{ end }}{{ end }}    networks:
{{ if .HasDb }}      - db
{{ end }}      - monitoring-back
      - grpc
      - http
{{ range .SubServices }}{{ $ss := . }}
  svc-{{ .ShortName }}:
    image: {{ .ProjectGroupName }}/{{ .Name }}:${TAG_SVC_{{ upperSnakeCase .ShortName }}}
    command: serve --jwt-secret=${JWT_SECRET} --max-recv-msg-size=${MAX_RECV_MSG_SIZE} --max-send-msg-size=${MAX_SEND_MSG_SIZE}{{ range .SubServices }} --svc-{{ .ShortName }}-address="svc-{{ .ShortName }}:{{ .DefaultPort }}"{{ end }}{{ range .DbTypes }} --{{ lowerKebabCase . }}-migrate --{{ lowerKebabCase . }}-dsn="
{{- if eq . "mysql" -}}${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_USERNAME{{ "}"}}:${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}@tcp(db-{{ lowerKebabCase . }}-{{ lowerKebabCase $ss.Name }}:3306)/${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
{{- else if eq . "postgres" }}host=db-{{ lowerKebabCase . }}-{{ lowerKebabCase $ss.Name }} port=5432 user=${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_USERNAME{{ "}"}} password=${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}} dbname=${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
{{- else if eq . "sqlite" }}/db/${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_FILE{{ "}"}}
{{- else if eq . "mssql" }}sqlserver://sa:${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_PASSWORD{{ "}"}}@db-{{ lowerKebabCase . }}-{{ lowerKebabCase $ss.Name }}:1433?database=${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase . }}_DB_DATABASE{{ "}"}}
{{- end }}"{{ end }}{{ range .ExtraServeFlags }} --{{ lowerKebabCase .Name }}="${{ "{" }}{{ upperSnakeCase $ss.Name }}_{{ upperSnakeCase .Name }}{{ "}" }}"{{ end }}
    # deploy:
    #   replicas: 5
    #   resources:
    #     limits:
    #       cpus: "0.1"
    #       memory: 50M
    #   restart_policy:
    #     condition: on-failure
{{ if .DbTypes }}{{ range .DbTypes }}{{ if eq . "sqlite" }}    volume:
      - db_{{ lowerSnakeCase . }}_{{ lowerSnakeCase $ss.Name }}_data:/db/{{ end }}{{ end }}{{ end }}{{ if .SubServices }}
    depends_on:
{{ range .SubServices }}      - svc-{{ .ShortName }}
{{ end }}{{ end }}    networks:
      - monitoring-back
      - grpc
      - http
{{ end }}
  ############
  # Consoles #
  ############
  console-{{ .ShortName }}:
    image: {{ .ProjectGroupName }}/{{ .Name }}:${TAG}
    command: console --max-recv-msg-size=${MAX_RECV_MSG_SIZE} --max-send-msg-size=${MAX_SEND_MSG_SIZE} --address=svc-{{ .ShortName }}:{{ .DefaultPort }}
    depends_on:
      - svc-{{ .ShortName }}
    networks:
      - grpc
{{ range .SubServices }}
  console-{{ .ShortName }}:
    image: {{ .ProjectGroupName }}/{{ .Name }}:${TAG_SVC_{{ upperSnakeCase .ShortName }}}
    command: console --max-recv-msg-size=${MAX_RECV_MSG_SIZE} --max-send-msg-size=${MAX_SEND_MSG_SIZE} --address=svc-{{ .ShortName }}:{{ .DefaultPort }}
    depends_on:
      - svc-{{ .ShortName }}
    networks:
      - grpc
{{ end }}
  #################
  # Extra - Infra #
  #################
  go-swagger:
    # container_name: go-swagger
    image: gomeet/gomeet-go-swagger
    depends_on:
      - svc-{{ .ShortName }}
    command: [ "serve", "http://svc-{{ .ShortName }}:{{ .DefaultPort }}/api/v1/swagger.json" ]
    environment:
      - PORT=80
    ports:
      - 8000:80
    networks:
      - http

  godoc:
    # container_name: godoc
    image: gomeet/gomeet-godoc
    volumes:
      - ./:/go/src/{{ .GoPkg }}
    ports:
      - 8001:6060

  prometheus:
    image: prom/prometheus:v1.8.2
    # container_name: gomeet-prometheus
    volumes:
      - ./infra/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.local.path=/prometheus'
      - '--alertmanager.url=http://alertmanager:9093'
    expose:
      - 9090
    ports:
      - 9090:9090
    links:
      - alertmanager
    networks:
      - monitoring-back
    depends_on:
      - svc-{{ .ShortName }}{{ range .SubServices }}
      - svc-{{ .ShortName }}{{ end }}

  grafana:
    image: grafana/grafana:4.6.2
    # container_name: gomeet-grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - infra/config.monitoring
    networks:
      - monitoring-back
      - monitoring-front

  alertmanager:
    image: prom/alertmanager:v0.10.0
    ports:
      - 9093:9093
    volumes:
      - ./infra/alertmanager/:/etc/alertmanager/
    networks:
      - monitoring-back
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/alertmanager'

  cadvisor:
    image: google/cadvisor:v0.25.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    networks:
      - monitoring-back

  node-exporter:
    # container_name: node-exporter
    image: prom/node-exporter:v0.15.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: '-collector.procfs=/host/proc -collector.sysfs=/host/sys -collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)" collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"'
    expose:
      - 9100
    networks:
      - monitoring-back
