module Page exposing (Page(..), view, viewErrors, viewHeader)

import Api.Request exposing (Cred)
import Assets.Icons as Icons
import Assets.Images as Images
import Browser exposing (Document)
import Bulma.Components as Ui
import Bulma.Elements as Ui
import Bulma.Layout as Ui
import Bulma.Modifiers as Ui
import Html exposing (Html, a, button, div, main_, p, span, text)
import Html.Attributes exposing (class, href, style)
import Html.Attributes.Aria exposing (ariaExpanded, ariaLabel, role)
import Html.Events exposing (onClick)
import Route exposing (Route)
import Session exposing (Session)
import Viewer exposing (Viewer)


{-| Determines which navbar link (if any) will be rendered as active.

Note that we don't enumerate every page here, because the navbar doesn't
have links for every page. Anything that's not part of the navbar falls
under Other.

-}
type Page
    = Other
    | Home
    | Version
    | ServicesStatus
    | Echo
    | Login


{-| Take a page's Html and frames it with a header and footer.

The caller provides the current user, so we can display in either
"signed in" (rendering username) or "signed out" mode.

isLoading is for determining whether we should show a loading spinner
in the header. (This comes up during slow page transitions.)

-}
view : Maybe Viewer -> Page -> { title : String, content : Html msg } -> Document msg
view maybeViewer page { title, content } =
    { title = title ++ " - {{ upperPascalCase .ShortName }}"
    , body = viewHeader page maybeViewer :: viewContent content :: [ viewFooter ]
    }


viewContent : Html msg -> Html msg
viewContent content =
    main_ [ class "main-container" ] [ content ]


viewHeader : Page -> Maybe Viewer -> Html msg
viewHeader page maybeViewer =
    Ui.navbar Ui.navbarModifiers
        []
        [ Ui.navbarBrand []
            (Ui.navbarBurger False
                []
                [ span [] []
                , span [] []
                , span [] []
                ]
            )
            [ Ui.navbarItem False
                []
                [ Images.img Images.Logo ]
            ]
        , navbarMenu page maybeViewer
        ]


navbarMenu : Page -> Maybe Viewer -> Ui.NavbarSection msg
navbarMenu page maybeViewer =
    let
        navbarEnd =
            case maybeViewer of
                Just viewer ->
                    Ui.navbarEnd []
                        [ navbarLink page Route.Logout [ text "logout" ] ]

                Nothing ->
                    Ui.navbarEnd []
                        [ navbarLink page Route.Login [ text "login" ] ]
    in
    Ui.navbarMenu True
        [ role "button"
        , ariaLabel "menu"
        , ariaExpanded "false"
        ]
        [ Ui.navbarStart []
            [ navbarLink page Route.Home [ Icons.iconText Icons.Home Ui.Standard "Home" ]
            , navbarLink page Route.Version [ Icons.iconText Icons.CodeBranch Ui.Standard "Version" ]
            , navbarLink page Route.ServicesStatus [ Icons.iconText Icons.InfoCircle Ui.Standard "Services Status" ]
            , navbarLink page Route.Echo [ Icons.iconText Icons.Comment Ui.Standard "Echo" ]
            ]

        --, navbarEnd
        ]


navbarLink : Page -> Route -> List (Html msg) -> Html msg
navbarLink page route linkContent =
    Ui.navbarItemLink (isActive page route)
        [ Route.href route ]
        linkContent


viewFooter : Html msg
viewFooter =
    Ui.footer []
        [ Ui.container []
            [ Ui.content Ui.Standard
                []
                [ a [ Route.href Route.Home ] [ text "BoGateway Â©2018" ] ]
            ]
        ]


isActive : Page -> Route -> Bool
isActive page route =
    case ( page, route ) of
        ( Home, Route.Home ) ->
            True

        ( Version, Route.Version ) ->
            True

        ( ServicesStatus, Route.ServicesStatus ) ->
            True

        ( Echo, Route.Echo ) ->
            True

        ( Login, Route.Login ) ->
            True

        _ ->
            False


{-| Render dismissable errors. We use this all over the place!
-}
viewErrors : msg -> List String -> Html msg
viewErrors dismissErrors errors =
    if List.isEmpty errors then
        Html.text ""

    else
        div
            [ class "error-messages"
            , style "position" "fixed"
            , style "top" "0"
            , style "background" "rgb(250, 250, 250)"
            , style "padding" "20px"
            , style "border" "1px solid"
            ]
        <|
            List.map (\error -> p [] [ text error ]) errors
                ++ [ button [ onClick dismissErrors ] [ text "Ok" ] ]
