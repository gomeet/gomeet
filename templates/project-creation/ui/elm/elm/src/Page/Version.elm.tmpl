module Page.Version exposing (Model, Msg, init, subscriptions, toSession, update, view)

import Api.Endpoint as Endpoint
import Api.Pb.{{ upperPascalCase .ShortName }} as {{ upperPascalCase .ShortName }}Pb
import Api.Request as Request
import Components.Card as Card
import Components.Color as Color exposing (Color)
import Components.Loading as Loading
import Components.Text as Text
import Html exposing (Html, button, div, h3, span, text)
import Html.Attributes exposing (class, style)
import Html.Events exposing (onClick)
import Http
import Session exposing (Session)
import Task exposing (Task)



-- MODEL


type alias Model =
    { session : Session

    -- Loaded independently from server
    , serverVersion : Status {{ upperPascalCase .ShortName }}Pb.VersionResponse
    }


type Status a
    = Loading
    | LoadingSlowly
    | Loaded a
    | Failed


init : Session -> ( Model, Cmd Msg )
init session =
    ( { session = session
      , serverVersion = Loading
      }
    , Cmd.batch
        [ fetchServerVersion session
            |> Task.attempt CompletedServerVersionLoad
        , Task.perform (\_ -> PassedSlowLoadThreshold) Loading.slowThreshold
        ]
    )



-- VIEW


view : Model -> { title : String, content : Html Msg }
view model =
    { title = ""
    , content = div [ class "container" ] [ viewContent model ]
    }


viewContent : Model -> Html Msg
viewContent model =
    let
        content =
            div [ style "min-height" "50px" ] <|
                case model.serverVersion of
                    Loading ->
                        []

                    LoadingSlowly ->
                        [ text "Server version : "
                        , Loading.icon
                        ]

                    Failed ->
                        [ Loading.error "version" ]

                    Loaded version ->
                        [ text "Version : "
                        , Text.colored Color.Primary (version.name ++ "@" ++ version.version)
                        ]
    in
    Card.view
        []
        [ div
            []
            [ h3 [] [ text "Version" ]
            , content
            , div [ class "row" ]
                [ div [ class "column text-right screen-only" ]
                    [ text "Touch REFRESH button to reload version from server "
                    , Text.colored Color.Primary <| Endpoint.toString Endpoint.version
                    , text " endpoint."
                    ]
                , div [ class "text-right" ]
                    [ button [ onClick ClickedRefresh ] [ text "Refresh" ] ]
                ]
            ]
        ]



-- UPDATE


type Msg
    = GotSession Session
    | ClickedRefresh
    | CompletedServerVersionLoad (Result Http.Error {{ upperPascalCase .ShortName }}Pb.VersionResponse)
    | PassedSlowLoadThreshold


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotSession session ->
            ( { model | session = session }, Cmd.none )

        ClickedRefresh ->
            ( { model | serverVersion = LoadingSlowly }
            , fetchServerVersion model.session
                |> Task.attempt CompletedServerVersionLoad
            )

        CompletedServerVersionLoad (Ok serverVersion) ->
            ( { model | serverVersion = Loaded serverVersion }, Cmd.none )

        CompletedServerVersionLoad (Err error) ->
            ( { model | serverVersion = Failed }, Cmd.none )

        PassedSlowLoadThreshold ->
            let
                -- If any data is still Loading, change it to LoadingSlowly
                -- so `view` knows to render a spinner.
                serverVersion =
                    case model.serverVersion of
                        Loading ->
                            LoadingSlowly

                        other ->
                            other
            in
            ( { model | serverVersion = serverVersion }, Cmd.none )



-- HTTP


fetchServerVersion : Session -> Task Http.Error {{ upperPascalCase .ShortName }}Pb.VersionResponse
fetchServerVersion session =
    let
        maybeCred =
            Session.cred session

        request =
            Request.version maybeCred
    in
    Http.toTask request



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Session.changes GotSession (Session.navKey model.session) (Session.randomSeed model.session)



-- EXPORT


toSession : Model -> Session
toSession model =
    model.session
