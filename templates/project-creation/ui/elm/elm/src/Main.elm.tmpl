module Main exposing (main)

import Api.Request as Api exposing (Cred)
import Browser exposing (Document)
import Browser.Navigation as Nav
import Html exposing (..)
import Json.Decode as Decode exposing (Value)
import Page exposing (Page)
import Page.Blank as Blank
import Page.Echo as Echo
import Page.Home as Home
import Page.Login as Login
import Page.NotFound as NotFound
import Page.ServicesStatus as ServicesStatus
import Page.Version as Version
import Random
import Route exposing (Route)
import Session exposing (Session)
import Task
import Url exposing (Url)
import Viewer exposing (Viewer)



-- MODEL


type Model
    = Redirect Session
    | NotFound Session
    | Home Home.Model
    | Version Version.Model
    | ServicesStatus ServicesStatus.Model
    | Echo Echo.Model
    | Login Login.Model


init : Maybe Int -> Maybe Viewer -> Url -> Nav.Key -> ( Model, Cmd Msg )
init maybeSeed maybeViewer url navKey =
    let
        seed =
            case maybeSeed of
                Just s ->
                    s

                Nothing ->
                    1342
    in
    changeRouteTo (Route.fromUrl url)
        (Redirect (Session.fromViewer navKey (Random.initialSeed seed) maybeViewer))



-- VIEW


view : Model -> Document Msg
view model =
    let
        viewPage page toMsg config =
            let
                { title, body } =
                    Page.view (Session.viewer (toSession model)) page config
            in
            { title = title
            , body = List.map (Html.map toMsg) body
            }
    in
    case model of
        Redirect _ ->
            viewPage Page.Other (\_ -> Ignored) Blank.view

        NotFound _ ->
            viewPage Page.Other (\_ -> Ignored) NotFound.view

        Home home ->
            viewPage Page.Home GotHomeMsg (Home.view home)

        Version version ->
            viewPage Page.Version GotVersionMsg (Version.view version)

        ServicesStatus servicesStatus ->
            viewPage Page.ServicesStatus GotServicesStatusMsg (ServicesStatus.view servicesStatus)

        Echo echo ->
            viewPage Page.Echo GotEchoMsg (Echo.view echo)

        Login login ->
            viewPage Page.Login GotLoginMsg (Login.view login)



-- UPDATE


type Msg
    = Ignored
    | ChangedRoute (Maybe Route)
    | ChangedUrl Url
    | ClickedLink Browser.UrlRequest
    | GotSession Session
    | GotHomeMsg Home.Msg
    | GotVersionMsg Version.Msg
    | GotServicesStatusMsg ServicesStatus.Msg
    | GotEchoMsg Echo.Msg
    | GotLoginMsg Login.Msg


toSession : Model -> Session
toSession page =
    case page of
        Redirect session ->
            session

        NotFound session ->
            session

        Home home ->
            Home.toSession home

        Version version ->
            Version.toSession version

        ServicesStatus servicesStatus ->
            ServicesStatus.toSession servicesStatus

        Echo echo ->
            Echo.toSession echo

        Login login ->
            Login.toSession login


changeRouteTo : Maybe Route -> Model -> ( Model, Cmd Msg )
changeRouteTo maybeRoute model =
    let
        session =
            toSession model
    in
    case maybeRoute of
        Nothing ->
            ( NotFound session, Cmd.none )

        Just Route.Root ->
            ( model, Route.replaceUrl (Session.navKey session) Route.Home )

        Just Route.Home ->
            Home.init session
                |> updateWith Home GotHomeMsg model

        Just Route.Version ->
            Version.init session
                |> updateWith Version GotVersionMsg model

        Just Route.ServicesStatus ->
            ServicesStatus.init session
                |> updateWith ServicesStatus GotServicesStatusMsg model

        Just Route.Echo ->
            Echo.init session
                |> updateWith Echo GotEchoMsg model

        Just Route.Login ->
            Login.init session
                |> updateWith Login GotLoginMsg model

        Just Route.Logout ->
            ( model, Api.logout )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case ( msg, model ) of
        ( Ignored, _ ) ->
            ( model, Cmd.none )

        ( ClickedLink urlRequest, _ ) ->
            case urlRequest of
                Browser.Internal url ->
                    case url.fragment of
                        Nothing ->
                            -- If we got a link that didn't include a fragment,
                            -- it's from one of those (href "") attributes that
                            -- we have to include to make the RealWorld CSS work.
                            --
                            -- In an application doing path routing instead of
                            -- fragment-based routing, this entire
                            -- `case url.fragment of` expression this comment
                            -- is inside would be unnecessary.
                            ( model, Cmd.none )

                        Just _ ->
                            ( model
                            , Nav.pushUrl (Session.navKey (toSession model)) (Url.toString url)
                            )

                Browser.External href ->
                    ( model
                    , Nav.load href
                    )

        ( ChangedUrl url, _ ) ->
            changeRouteTo (Route.fromUrl url) model

        ( ChangedRoute route, _ ) ->
            changeRouteTo route model

        ( GotHomeMsg subMsg, Home home ) ->
            Home.update subMsg home
                |> updateWith Home GotHomeMsg model

        ( GotVersionMsg subMsg, Version version ) ->
            Version.update subMsg version
                |> updateWith Version GotVersionMsg model

        ( GotServicesStatusMsg subMsg, ServicesStatus servicesStatus ) ->
            ServicesStatus.update subMsg servicesStatus
                |> updateWith ServicesStatus GotServicesStatusMsg model

        ( GotEchoMsg subMsg, Echo echo ) ->
            Echo.update subMsg echo
                |> updateWith Echo GotEchoMsg model

        ( GotLoginMsg subMsg, Login login ) ->
            Login.update subMsg login
                |> updateWith Login GotLoginMsg model

        ( GotSession session, Redirect _ ) ->
            ( Redirect session
            , Route.replaceUrl (Session.navKey session) Route.Home
            )

        ( _, _ ) ->
            -- Disregard messages that arrived for the wrong page.
            ( model, Cmd.none )


updateWith : (subModel -> Model) -> (subMsg -> Msg) -> Model -> ( subModel, Cmd subMsg ) -> ( Model, Cmd Msg )
updateWith toModel toMsg model ( subModel, subCmd ) =
    ( toModel subModel
    , Cmd.map toMsg subCmd
    )



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    case model of
        NotFound _ ->
            Sub.none

        Redirect _ ->
            let
                session =
                    toSession model
            in
            Session.changes GotSession (Session.navKey session) (Session.randomSeed session)

        Home home ->
            Sub.map GotHomeMsg (Home.subscriptions home)

        Version version ->
            Sub.map GotVersionMsg (Version.subscriptions version)

        ServicesStatus servicesStatus ->
            Sub.map GotServicesStatusMsg (ServicesStatus.subscriptions servicesStatus)

        Echo echo ->
            Sub.map GotEchoMsg (Echo.subscriptions echo)

        Login login ->
            Sub.map GotLoginMsg (Login.subscriptions login)



-- MAIN


main : Program Value Model Msg
main =
    Api.application Viewer.decoder
        { init = init
        , onUrlChange = ChangedUrl
        , onUrlRequest = ClickedLink
        , subscriptions = subscriptions
        , update = update
        , view = view
        }
