module Main exposing (Model, Msg(..), getServerVersion, init, main, subscriptions, update, view, viewServerVersion)

import Api.Endpoint as Endpoint
import Api.Pb.{{ upperPascalCase .ShortName }} as {{ upperPascalCase .ShortName }}Pb
import Api.Request as Request
import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Url.Builder as Url



-- MAIN


main =
    Browser.element
        { init = init
        , update = update
        , subscriptions = subscriptions
        , view = view
        }



-- MODEL


type alias Model =
    { serverVersion : {{ upperPascalCase .ShortName }}Pb.VersionResponse
    , serverVersionLoaded : Bool
    }


init : () -> ( Model, Cmd Msg )
init _ =
    ( Model ({{ upperPascalCase .ShortName }}Pb.VersionResponse "..." "...") False
    , getServerVersion
    )



-- UPDATE


type Msg
    = GetServerVersion
    | NewServerVersion (Result Http.Error {{ upperPascalCase .ShortName }}Pb.VersionResponse)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GetServerVersion ->
            ( { model | serverVersion = {{ upperPascalCase .ShortName }}Pb.VersionResponse "..." "...", serverVersionLoaded = False }
            , getServerVersion
            )

        NewServerVersion result ->
            case result of
                Ok newServerVersion ->
                    ( { model | serverVersion = newServerVersion, serverVersionLoaded = True }
                    , Cmd.none
                    )

                Err _ ->
                    ( model
                    , Cmd.none
                    )



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- VIEW


view : Model -> Html Msg
view model =
    div []
        [ div [] [ text "{{ upperPascalCase .ShortName }} - inside elm - OK" ]
        , if model.serverVersionLoaded then
            viewServerVersion model.serverVersion

          else
            div [] [ text "Waiting..." ]
        ]


viewServerVersion : {{ upperPascalCase .ShortName }}Pb.VersionResponse -> Html Msg
viewServerVersion serverVersion =
    div []
        [ h2 [] [ text "Server Version" ]
        , div []
            [ span [] [ text "Name : " ]
            , span [] [ text serverVersion.name ]
            ]
        , div []
            [ span [] [ text "Version : " ]
            , span [] [ text serverVersion.version ]
            ]
        , button [ onClick GetServerVersion ] [ text "Refresh" ]
        , div [] [ text (Debug.toString Endpoint.version) ]
        ]



-- HTTP


getServerVersion : Cmd Msg
getServerVersion =
    Http.send NewServerVersion <|
        Request.version Nothing
