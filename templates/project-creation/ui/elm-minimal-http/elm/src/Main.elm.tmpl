import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Url.Builder as Url



-- MAIN


main =
  Browser.element
    { init = init
    , update = update
    , subscriptions = subscriptions
    , view = view
    }



-- MODEL


type alias ServerVersion =
  { name : String
  , version : String
  }


type alias Model =
  { serverVersion : ServerVersion
  , serverVersionLoaded : Bool
  }


init : () -> (Model, Cmd Msg)
init _ =
  ( Model (ServerVersion "..." "...") False
  , getServerVersion
  )



-- UPDATE


type Msg
  = GetServerVersion
  | NewServerVersion (Result Http.Error ServerVersion)


update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
  case msg of
    GetServerVersion ->
      ( { model | serverVersion = (ServerVersion "..." "..."), serverVersionLoaded = False }
      , getServerVersion
      )

    NewServerVersion result ->
      case result of
        Ok newServerVersion ->
          ( { model | serverVersion = newServerVersion, serverVersionLoaded = True }
          , Cmd.none
          )

        Err _ ->
          ( model
          , Cmd.none
          )



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
  Sub.none



-- VIEW


view : Model -> Html Msg
view model =
  div []
    [ div [] [ text "{{ .ShortName }} - inside elm - OK" ]
    , if model.serverVersionLoaded then viewServerVersion model.serverVersion else div [] [ text "Waiting..." ]
    ]


viewServerVersion : ServerVersion -> Html Msg
viewServerVersion serverVersion =
  div []
    [ h2 [] [ text "Server Version" ]
    , div [] [ span [] [ text "Name : " ]
             , span [] [ text serverVersion.name ]
             ]
    , div [] [ span [] [ text "Version : " ]
             , span [] [ text serverVersion.version ]
             ]
    , button [ onClick GetServerVersion ] [ text "Refresh" ]
    ]

-- HTTP


getServerVersion : Cmd Msg
getServerVersion =
  Http.send NewServerVersion (Http.get (serverVersionUrl) serverVersionDecoder)


serverVersionUrl : String
serverVersionUrl =
  Url.absolute ["api","v1","version"]
    [ ]


serverVersionDecoder : Decode.Decoder ServerVersion
serverVersionDecoder =
  Decode.map2 ServerVersion
     (Decode.field "name" Decode.string)
     (Decode.field "version" Decode.string)
