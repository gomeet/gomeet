module Page.Home exposing (Model, Msg, init, subscriptions, toSession, update, view)

import Api.Endpoint as Endpoint exposing (Endpoint)
import Components.Card as Card
import Html exposing (Html, a, div, h3, span, text)
import Html.Attributes exposing (class, style)
import Route exposing (Route)
import Session exposing (Session)


type alias Model =
    { session : Session
    }


init : Session -> ( Model, Cmd Msg )
init session =
    ( { session = session
      }
    , Cmd.none
    )



-- VIEW


view : Model -> { title : String, content : Html Msg }
view model =
    { title = ""
    , content = div [ class "container" ] [ viewContent model ]
    }


viewContent : Model -> Html Msg
viewContent model =
    div [ class "row row-center" ]
        [ viewCardVersion model
        , viewCardServicesStatus model
        , viewCardEcho model
        ]


viewCardVersion : Model -> Html Msg
viewCardVersion _ =
    viewHomeCard Route.Version "Version" Endpoint.version


viewCardServicesStatus : Model -> Html Msg
viewCardServicesStatus _ =
    viewHomeCard Route.ServicesStatus "ServicesStatus" Endpoint.servicesStatus


viewCardEcho : Model -> Html Msg
viewCardEcho _ =
    viewHomeCard Route.Echo "Echo" Endpoint.echo


viewHomeCard : Route -> String -> Endpoint -> Html Msg
viewHomeCard route title endpoint =
    div
        [ class "column text-center"
        , style "margin-bottom" "1em"
        ]
        [ Card.view
            []
            [ div
                []
                [ h3 [] [ text title ]
                , div [ class "text-justify", style "min-height" "100px" ]
                    [ text <| "Display " ++ title ++ " page and call "
                    , span [ class "color-primary" ] [ text <| Endpoint.toString endpoint ]
                    , text " endpoint."
                    ]
                , div [ class "text-right" ]
                    [ buttonLink route "Go" ]
                ]
            ]
        ]


buttonLink : Route -> String -> Html Msg
buttonLink route lbl =
    a [ class "button", Route.href route ] [ text lbl ]



-- UPDATE


type Msg
    = GotSession Session


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotSession session ->
            ( { model | session = session }, Cmd.none )



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Session.changes GotSession (Session.navKey model.session) (Session.randomSeed model.session)



-- EXPORT


toSession : Model -> Session
toSession model =
    model.session
