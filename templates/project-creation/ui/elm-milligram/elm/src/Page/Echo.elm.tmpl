module Page.Echo exposing (Model, Msg, init, subscriptions, toSession, update, view)

import Api.Endpoint as Endpoint
import Api.Pb.{{ upperPascalCase .ShortName }} as {{ upperPascalCase .ShortName }}Pb
import Api.Request as Request
import Components.Card as Card
import Components.Color as Color exposing (Color)
import Components.Loading as Loading
import Components.Text as Text
import Html exposing (Html, button, div, h3, input, span, text)
import Html.Attributes exposing (class, disabled, placeholder, style, type_, value)
import Html.Events exposing (onClick, onInput)
import Http
import Random exposing (Seed)
import Session exposing (Session)
import Task exposing (Task)
import Uuid as Uuid exposing (Uuid)


type alias Model =
    { session : Session
    , echoRequest : {{ upperPascalCase .ShortName }}Pb.EchoRequest

    -- Loaded independently from server
    , echoResponse : Status {{ upperPascalCase .ShortName }}Pb.EchoRequest
    }


type Status a
    = Empty
    | Loading
    | Loaded a
    | Failed


init : Session -> ( Model, Cmd Msg )
init session =
    ( { session = session
      , echoRequest = {{ upperPascalCase .ShortName }}Pb.EchoRequest "" ""
      , echoResponse = Empty
      }
    , Cmd.batch
        [ Task.perform (always GenerateNewUuid) (Task.succeed ()) ]
    )



-- VIEW


view : Model -> { title : String, content : Html Msg }
view model =
    { title = ""
    , content = div [ class "container" ] [ viewContent model ]
    }


viewContent : Model -> Html Msg
viewContent model =
    let
        serverTitle =
            h3 [] [ text "Server response : " ]

        content =
            case model.echoResponse of
                Empty ->
                    { content = [ viewSendButton True ]
                    , formEnabled = True
                    }

                Loading ->
                    { content =
                        [ serverTitle
                        , div [ class "text-center" ]
                            [ text "loading... "
                            , Loading.icon
                            ]
                        , div [ class "clearfix" ] []
                        ]
                    , formEnabled = False
                    }

                Failed ->
                    { content =
                        [ viewSendButton True
                        , serverTitle
                        , Loading.errorBox "echo"
                        , div [ class "clearfix" ] []
                        ]
                    , formEnabled = True
                    }

                Loaded echoResponse ->
                    { content =
                        [ div []
                            [ serverTitle
                            , viewEchoResponseRow "Uuid : " echoResponse.uuid
                            , viewEchoResponseRow "Content : " echoResponse.content
                            , div [ class "clearfix" ] []
                            , div [ class "text-right" ]
                                [ button [ onClick Reset ] [ text "Reset" ]
                                , span [] [ text "\u{00A0}" ]
                                , button [ onClick SendEchoRequest ] [ text "Again" ]
                                ]
                            , div [ class "clearfix" ] []
                            ]
                        ]
                    , formEnabled = True
                    }
    in
    Card.view
        []
        [ div
            []
            ([ h3 [] [ text "Echo" ]
             , viewEchoForm content.formEnabled model.echoRequest
             ]
                ++ content.content
            )
        ]


viewSendButton : Bool -> Html Msg
viewSendButton enabled =
    div [ class "totot row" ]
        [ div [ class "column text-right screen-only btn-info" ]
            [ text "Touch SEND button to send form on server "
            , Text.colored Color.Primary <| Endpoint.toString Endpoint.echo
            , text " endpoint."
            ]
        , div [ class "text-right" ]
            [ button [ onClick SendEchoRequest, disabled (not enabled) ] [ text "Send" ] ]
        ]


viewEchoResponseRow : String -> String -> Html Msg
viewEchoResponseRow label val =
    div [ class "row" ]
        [ div [ class "column column-20" ] [ text label ]
        , div [ class "column column-80" ] [ Text.colored Color.Primary val ]
        ]


viewEchoForm : Bool -> {{ upperPascalCase .ShortName }}Pb.EchoRequest -> Html Msg
viewEchoForm enabled echoRequest =
    div [ class "form-wrapper" ]
        [ div [ class "row" ]
            [ div [ class "column column-80" ] [ viewInput "text" "Uuid" enabled echoRequest.uuid EchoUuidChange ]
            , div [ class "column column-20" ] [ button [ onClick GenerateNewUuid, disabled (not enabled) ] [ text "Generate Uuid" ] ]
            ]
        , div [ class "row" ]
            [ div [ class "column" ] [ viewInput "text" "Content" enabled echoRequest.content EchoContentChange ] ]
        ]


viewInput : String -> String -> Bool -> String -> (String -> msg) -> Html msg
viewInput t ph enabled v toMsg =
    let
        p =
            if enabled then
                ph

            else
                ""
    in
    input [ type_ t, placeholder p, value v, onInput toMsg, disabled (not enabled) ] []



-- UPDATE


type Msg
    = GotSession Session
    | EchoUuidChange String
    | EchoContentChange String
    | CompletedEchoLoad (Result Http.Error {{ upperPascalCase .ShortName }}Pb.EchoResponse)
    | SendEchoRequest
    | GenerateNewUuid
    | Reset


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotSession session ->
            ( { model | session = session }, Cmd.none )

        EchoUuidChange newUuid ->
            ( { model
                | echoRequest = model.echoRequest |> setEchoRequestUuid newUuid
                , echoResponse = Empty
              }
            , Cmd.none
            )

        EchoContentChange content ->
            ( { model
                | echoRequest = model.echoRequest |> setEchoRequestContent content
                , echoResponse = Empty
              }
            , Cmd.none
            )

        GenerateNewUuid ->
            let
                ( newUuid, newSeed ) =
                    Random.step Uuid.uuidGenerator (Session.randomSeed model.session)
            in
            ( { model
                | session = Session.fromViewer (Session.navKey model.session) newSeed (Session.viewer model.session)
                , echoRequest = model.echoRequest |> setEchoRequestUuid (Uuid.toString newUuid)
                , echoResponse = Empty
              }
            , Cmd.none
            )

        SendEchoRequest ->
            ( { model | echoResponse = Loading }
            , sendEchoRequest model.session model.echoRequest
                |> Task.attempt CompletedEchoLoad
            )

        Reset ->
            update GenerateNewUuid
                { model
                    | echoResponse = Empty
                    , echoRequest = model.echoRequest |> setEchoRequestContent ""
                }

        CompletedEchoLoad (Ok echoResponse) ->
            ( { model | echoResponse = Loaded echoResponse }, Cmd.none )

        CompletedEchoLoad (Err error) ->
            ( { model | echoResponse = Failed }, Cmd.none )


setEchoRequestUuid : String -> {{ upperPascalCase .ShortName }}Pb.EchoRequest -> {{ upperPascalCase .ShortName }}Pb.EchoRequest
setEchoRequestUuid newUuid echoRequest =
    { echoRequest | uuid = newUuid }


setEchoRequestContent : String -> {{ upperPascalCase .ShortName }}Pb.EchoRequest -> {{ upperPascalCase .ShortName }}Pb.EchoRequest
setEchoRequestContent newContent echoRequest =
    { echoRequest | content = newContent }



-- HTTP


sendEchoRequest : Session -> {{ upperPascalCase .ShortName }}Pb.EchoRequest -> Task Http.Error {{ upperPascalCase .ShortName }}Pb.EchoResponse
sendEchoRequest session echoRequest =
    let
        maybeCred =
            Session.cred session

        request =
            Request.echo maybeCred echoRequest
    in
    Http.toTask request



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Session.changes GotSession (Session.navKey model.session) (Session.randomSeed model.session)



-- EXPORT


toSession : Model -> Session
toSession model =
    model.session
