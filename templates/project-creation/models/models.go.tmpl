package models

/*
import (
	"time"

	"github.com/google/uuid"
	"github.com/jinzhu/gorm"
)

// MyModel is the GORM model definition.
type MyModel struct {
	UUID      uuid.UUID `gorm:"primary_key;type:char(36);not null"`
	Attr1     string `gorm:"size:30;index:idx_attr1"`
	Attr2     string `gorm:"size:13;"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time `sql:"index"`
}

// MyModel2 is the GORM model definition.
type MyModel2 struct {
	UUID      uuid.UUID `gorm:"primary_key;type:char(36);not null"`
	Attr1     string `gorm:"size:30;index:idx_attr1"`
	Attr2     string `gorm:"size:13;"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time `sql:"index"`
}

func (*MyModel) BeforeCreate(scope *gorm.Scope) error {
	scope.SetColumn("UUID", uuid.New())
	return nil
}

func (*MyModel2) BeforeCreate(scope *gorm.Scope) error {
	scope.SetColumn("UUID", uuid.New())
	return nil
}
{{ if not .DbTypes }}

// for migrate func you need to declare a func that return all model for your DB_TYPE in Makefile like this
func <mysql|postgres|sqlite|mssql>Models() []interface {
	values = append(values, &MyModel{})
	values = append(values, &MyModel2{})
	return
}

func <mysql|postgres|sqlite|mssql>BeforeMigrateSchema(db *gorm.DB) error { return nil }

func <mysql|postgres|sqlite|mssql>AfterMigrateSchema(db *gorm.DB) error { return nil }

*/
{{ else }}
*/

{{ range .DbTypes }}
// All {{ upperPascalCase . }} models
func {{ lowerPascalCase . }}Models() (values []interface{}) {
	//values = append(values, &MyModel{})
	return
}

// {{ lowerPascalCase . }}BeforeMigrateSchema you can set your custom migration queries here
// this hook occur before models migration
func {{ lowerPascalCase . }}BeforeMigrateSchema(db *gorm.DB) error {
	return nil
}

// {{ lowerPascalCase . }}AfterMigrateSchema you can set your custom migration queries here
// this hook occur after models migration
func {{ lowerPascalCase . }}AfterMigrateSchema(db *gorm.DB) error {
	return nil
}
{{ end }}{{ end }}
